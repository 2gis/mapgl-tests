import { MapModules } from '../map/mapModules';
import { BinaryFeatureStateMap, FeatureStateMap, Source, SourceAttributes } from './types';
import { MapState, TileCoords } from '../types';
import { Int64 } from '../utils/structures/int64';
import { GeneratedTileOptions } from '../types/tiles';
import { ModelData } from '../types/threads';
export declare class DefaultSource implements Source {
    private modules;
    type: "default";
    private id;
    private zenithSource;
    private universeTileLayer;
    private regionalTileLayer;
    private commercialPoiSource?;
    private commercialPoiTileLayer?;
    private options;
    constructor(state: MapState, modules: MapModules);
    destroy(): void;
    setAttributes(attributes: SourceAttributes): void;
    getAttributes(): SourceAttributes;
    getId(): number;
    setHoverId(id: Int64): void;
    setDisabledRegionsId(ids: number[]): void;
    resetHoverId(): void;
    setFeatureStateMap(featureStateMap: FeatureStateMap): void;
    setFeatureStateMapBinary(featureStateMap: BinaryFeatureStateMap): void;
    setCommercialModelIds(hiddenBuildingIds: Int64[]): void;
    generateHoverTile(mapState: MapState, tileCoords: TileCoords, styleId: number, selectedIds: Int64[], devicePixelRatio: number, generatedTileOptions?: GeneratedTileOptions, hoverId?: Int64, sourceId?: number): Promise<import("../types/threads").ProcessTileResponse>;
    generateModel(data: ModelData): Promise<import("../types/threads").ProcessModelResponse>;
    isIdentifiedAsDefault(): boolean;
}
