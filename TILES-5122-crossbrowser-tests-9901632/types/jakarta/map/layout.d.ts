import { HandlerAction } from '../types';
/**
 * Класс задающий лэйаут карты.
 *
 * +--------------------------------+
 * | externalContainer              |
 * |                                |
 * | +----------------------------+ |
 * | | rootContainer              | |
 * | |                            | |
 * | | +------------------------+ | |
 * | | | mapContainer           | | |
 * | | |                        | | |
 * | | | +--------------------+ | | |
 * | | | | canvas             | | | |
 * | | | +--------------------+ | | |
 * | | |                        | | |
 * | | | +--------------------+ | | |
 * | | | | htmlContainerInMap | | | |
 * | | | +--------------------+ | | |
 * | | |                        | | |
 * | | +------------------------+ | |
 * | |                            | |
 * | | +------------------------+ | |
 * | | | htmlContainerOutMap    | | |
 * | | +------------------------+ | |
 * | +----------------------------+ |
 * +--------------------------------+
 */
export declare class Layout {
    /**
     * Корневой контейнер. В него будет добавлен контейнер с картой и все доп. слои содержащие объекты не привязанные к карте, например контролы для SDK.
     * По умолчанию, взаимодействие со всеми элементами внутри rootContainer кроме mapContainer, никак не будет влиять на состояние карты.
     */
    rootContainer: HTMLDivElement;
    /**
     * Контейнер карты, содержащий канвас карты и все доп. контейнеры с объектами привязанными к карте, например HtmlMarker.
     * На этот контейнер повешены все обработчики событий карты, например: Handler, MouseMove и др.
     * Таким образом взаимодействия с любыми элементами внутри mapContainer будут менять состояние карты в соответствии
     * с логикой описанной в хэндлерах.
     */
    mapContainer: HTMLDivElement;
    /**
     * canvas в котором отрисовывается карта.
     */
    canvas: HTMLCanvasElement;
    /**
     * Контейнер расположенный вне контейнера карты mapContainer в котором находятся все объекты HtmMarker
     * при взаимодействии с которыми карта никак не должна менять свое состояние, например, при скролле контента
     * внутри HtmMarker карта не будет зумиться и ее нельзя будет таскать за такой маркер.
     */
    htmlContainerOutMap: HTMLDivElement;
    /**
     * Контейнер расположенный внутри контейнера карты mapContainer в котором находятся все объекты HtmMarker
     * при взаимодействии с которыми карта может менять свое состояние, например, при скролле контента
     * внутри HtmMarker карта будет зумиться и ее можно будет таскать за такой маркер.
     */
    htmlContainerInMap: HTMLDivElement;
    /**
     * Внешний контейнер карты, задается клиентом при инициализации.
     * Не нужно менять никакие свойства и вешать обработчики на этот контейнер, это может привести к конфликтам на клиенте.
     * В это контейнер будет добавлен корневой контейнер с картой и все.
     */
    externalContainer: HTMLElement;
    constructor(root: HTMLElement);
    setCanvasSize(width: number, height: number): this;
    destroy(): void;
    /**
     * Возвращает true, если target в оригинальном DOM-событии — это canvas в котором отрисовывается карта
     */
    isActionWithCanvas(action: HandlerAction): boolean;
    /**
     * Возвращает true, если target в оригинальном DOM-событии лежит внутри mapContainer.
     * Для touch-событий проверяется target в каждом touch.
     */
    isActionWithMap(action: HandlerAction): boolean;
    private isTargetInMap;
}
