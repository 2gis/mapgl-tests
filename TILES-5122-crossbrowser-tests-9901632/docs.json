{"nav":[{"children":[],"level":1,"reference":"quickstart","route":"quickstart","title":"Quickstart"},{"children":[],"level":1,"reference":"marker","route":"marker","title":"Markers"},{"children":[],"level":1,"reference":"popups","route":"popups","title":"Popups"},{"children":[],"level":1,"reference":"tooltips","route":"tooltips","title":"Tooltips"},{"children":[],"level":1,"reference":"selection","route":"selection","title":"Object selection"},{"children":[],"level":1,"reference":"controls","route":"controls","title":"Controls"},{"children":[],"level":1,"reference":"async","route":"async","title":"Asynchronous Loading"},{"children":[],"level":1,"reference":"clustering","route":"clustering","title":"Clustering"},{"children":[],"level":1,"reference":"directions","route":"directions","title":"Directions"},{"children":[],"level":1,"reference":"geometries","route":"geometries","title":"Geometries"},{"children":[],"level":1,"reference":"geolocation","route":"geolocation","title":"Geolocation"},{"children":[],"level":1,"reference":"react","route":"react","title":"Usage with React"}],"pages":{"readme":{"reference":"readme","route":"readme","sourcePath":"src/jakarta/dynamicObjects/readme.md","title":"(untitled)","contents":["<h1 id=\"dynamic-objects\">dynamic objects</h1>\n<h2 id=\"назначение\">Назначение</h2>\n<p>Здесь перечислены объекты, которые могут быть добавлены пользователем (в некоторых случаях другими компонентами карты — GeoJsonTileLayer) на карту в процессе ее работы, уже после инициализации карты.</p>\n<p>Каждый динамический объект наследуется от базвого класса DynamicObject, который наследуется от Evented.\nТакое наследование дает:</p>\n<ul>\n<li>Возможность испускать события.</li>\n<li>Доступ к стейту карты.</li>\n<li>Автоматическое очищение с карты (из tileManger и слоев карты), если вызвается метод destroy.</li>\n<li>Очищение стилей из метатайла (если таковые есть у динамического объекта).</li>\n</ul>\n<p>Также, можно унаследоваться от <code>DraggableDynamicObject</code>, что даст возможность перемещать объект по карте с помощью событий мыши или тач-событий.</p>\n<p>Чтобы поместить динамический объект на карту, необходимо:</p>\n<ul>\n<li>Добавить в tileManger инстанс tileObject с данными о динамическом объекте, чтобы отрендерить объект в контексте каких-либо тайлов.</li>\n<li>Добавить в layers у карты, чтобы подписаться на обновление карты.</li>\n</ul>\n<h2 id=\"почему-выделено-в-отдельную-сущность\">Почему выделено в отдельную сущность</h2>\n<p>Чтобы отделить объекты, которые добавляются методами карты от объектов, которые добавляются руками.</p>\n<h2 id=\"почему-так-называется\">Почему так называется</h2>\n<p>Потому что объекты могут добавляться отдельно от методов карты. То есть не методами карты.</p>\n<h2 id=\"какие-ограничения-накладываются-или-предполагаются-если-они-не-выполняются\">Какие ограничения накладываются (или предполагаются, если они не выполняются)</h2>\n<ul>\n<li>Динамических объектов не может быть много на карте. Например, сейчас более 1 000 полигонов могут тормозить карту.</li>\n</ul>\n"],"contentsRaw":"# dynamic objects\n\n## Назначение\n\nЗдесь перечислены объекты, которые могут быть добавлены пользователем (в некоторых случаях другими компонентами карты — GeoJsonTileLayer) на карту в процессе ее работы, уже после инициализации карты.\n\nКаждый динамический объект наследуется от базвого класса DynamicObject, который наследуется от Evented.\nТакое наследование дает:\n* Возможность испускать события.\n* Доступ к стейту карты.\n* Автоматическое очищение с карты (из tileManger и слоев карты), если вызвается метод destroy.\n* Очищение стилей из метатайла (если таковые есть у динамического объекта).\n\nТакже, можно унаследоваться от `DraggableDynamicObject`, что даст возможность перемещать объект по карте с помощью событий мыши или тач-событий.\n\nЧтобы поместить динамический объект на карту, необходимо:\n* Добавить в tileManger инстанс tileObject с данными о динамическом объекте, чтобы отрендерить объект в контексте каких-либо тайлов.\n* Добавить в layers у карты, чтобы подписаться на обновление карты.\n\n## Почему выделено в отдельную сущность\n\nЧтобы отделить объекты, которые добавляются методами карты от объектов, которые добавляются руками.\n\n## Почему так называется\n\nПотому что объекты могут добавляться отдельно от методов карты. То есть не методами карты.\n\n## Какие ограничения накладываются (или предполагаются, если они не выполняются)\n\n* Динамических объектов не может быть много на карте. Например, сейчас более 1 000 полигонов могут тормозить карту.","metadata":{}},"_nav":{"reference":"_nav","route":"_nav","sourcePath":"docs/mapgl-api/_nav.md","title":"(untitled)","contents":[{"tag":"page","value":"quickstart"},{"tag":"page","value":"marker"},{"tag":"page","value":"popups"},{"tag":"page","value":"tooltips"},{"tag":"page","value":"selection"},{"tag":"page","value":"controls"},{"tag":"page","value":"async"},{"tag":"page","value":"clustering"},{"tag":"page","value":"directions"},{"tag":"page","value":"geometries"},{"tag":"page","value":"geolocation"},{"tag":"page","value":"react"}],"contentsRaw":"@page quickstart\n@page marker\n@page popups\n@page tooltips\n@page selection\n@page controls\n@page async\n@page clustering\n@page directions\n@page geometries\n@page geolocation\n@page react","metadata":{}},"async":{"reference":"async","route":"async","sourcePath":"docs/mapgl-api/async.md","title":"Asynchronous Loading","contents":[{"tag":"heading","value":"Asynchronous Loading","level":1,"route":"async"},"<h1 id=\"asynchronous-loading\">Asynchronous Loading</h1>\n<p>By default the map loads synchronously.</p>\n<p>In this example:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://mapgl.2gis.com/api/js&quot;&gt;&lt;/script&gt;\n&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new mapgl.Map(&#39;container&#39;, {\n        center: [55.31878, 25.23584],\n        zoom: 13,\n        key: &#39;Your API access key&#39;\n    });\n&lt;/script&gt;</code></pre>\n<p>Any execution process will be stopped while the script <code>https://mapgl.2gis.com/api/js</code> is not loaded.</p>\n<p>To load the script asynchronously, you can add <code>async</code> and <code>defer</code> attributes to the script tag and specify a global function name which will execute after the script loading.</p>\n",{"tag":"example","value":"examples/async.html"}],"contentsRaw":"\n@# Asynchronous Loading\n\n# Asynchronous Loading\n\nBy default the map loads synchronously.\n\nIn this example:\n```html\n<script src=\"https://mapgl.2gis.com/api/js\"></script>\n<div id=\"container\"></div>\n<script>\n    const map = new mapgl.Map('container', {\n        center: [55.31878, 25.23584],\n        zoom: 13,\n        key: 'Your API access key'\n    });\n</script>\n```\nAny execution process will be stopped while the script `https://mapgl.2gis.com/api/js` is not loaded.\n\nTo load the script asynchronously, you can add `async` and `defer` attributes to the script tag and specify a global function name which will execute after the script loading.\n\n@example examples/async.html","metadata":{"title":"Asynchronous Loading"}},"clustering":{"reference":"clustering","route":"clustering","sourcePath":"docs/mapgl-api/clustering.md","title":"Clustering","contents":[{"tag":"heading","value":"Clustering","level":1,"route":"clustering"},"<h1 id=\"clustering\">Clustering</h1>\n<p>The marker clustering helps you to manage multiple markers at different zoom levels. When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.\nIf you have a lot of markers on the map, it’s better to use a clustering to organize them better visually.</p>\n<h1 id=\"installation\">Installation</h1>\n<p>To add marker clustering functionality to the @type Map you need to include the clustering plugin JS file after MapGL API file using unpkg CDN:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://unpkg.com/@2gis/mapgl-clusterer@^1/dist/clustering.js&quot;&gt;&lt;/script&gt;</code></pre>\n<p>Or using NPM:</p>\n<pre><code>npm install @2gis/mapgl-clusterer</code></pre><h1 id=\"usage\">Usage</h1>\n<p>First you need to instantiate the @pluginType clusterer/Clusterer.</p>\n<p>If you install the clustering plugin using NPM, you can import the @pluginType clusterer/Clusterer to your project as shown below:</p>\n<pre><code class=\"language-js\">// import as an ES module\nimport { Clusterer } from &#39;@2gis/mapgl-clusterer&#39;;\n\n// or as a CommonJS module\nconst { Clusterer } = require(&#39;@2gis/mapgl-clusterer&#39;);\n\nconst clusterer = new Clusterer(map, {\n    radius: 60,\n});</code></pre>\n<p>If you use unpkg CDN, you need to instantiate the @pluginType clusterer/Clusterer via the global object <code>mapgl</code>:</p>\n<pre><code class=\"language-js\">const clusterer = new mapgl.Clusterer(map, {\n    radius: 60,\n});</code></pre>\n<p>The first argument of the @pluginType clusterer/Clusterer constructor is an instance of the @type Map, the second - @pluginType clusterer/ClustererOptions.</p>\n<p>The clusterer is ready to go. The next step will be markers loading.\nTo add markers to the clusterer you need to use the <code>load</code> method.\nAs an argument this method takes an array of @pluginType clusterer/InputMarker markers.</p>\n<p>In the example below the markers will be added to the clusterer with default styles:</p>\n<pre><code class=\"language-js\">const markers = [\n    { coordinates: [55.27887, 25.21001] },\n    { coordinates: [55.30771, 25.20314] },\n    { coordinates: [55.35266, 25.24382] },\n    ...\n];\n\nclusterer.load(markers);</code></pre>\n<p>The markers passed to the clusterer will display on the map:</p>\n",{"tag":"example","value":"examples/clustering/defaultMarkers.html"},"<p>To reload the markers in the clusterer you need to call the <code>load</code> method again, but with a new array of markers.\nNew markers will display on the map immediately:</p>\n<pre><code class=\"language-js\">const newMarkers = [\n    { coordinates: [55.1234, 25.4321] },\n    ...\n];\n\nclusterer.load(newMarkers);</code></pre>\n<p>If the clusterer is no longer needed you can destroy it by using the <code>destroy</code> method:</p>\n<pre><code class=\"language-js\">clusterer.destroy();</code></pre>\n<h1 id=\"event-handling\">Event handling</h1>\n<p>The clusterer can emit events described in the @pluginType clusterer/ClustererEventTable. You can add handlers for them.</p>\n<p>For example, on click event:</p>\n<pre><code class=\"language-js\">clusterer.on(&#39;click&#39;, (event) =&gt; {\n    // do something\n});</code></pre>\n<p>As an argument the handler accepts a @pluginType clusterer/ClustererPointerEvent.\nA clusterer event target can be either a @pluginType clusterer/MarkerTarget or a @pluginType clusterer/ClusterTarget.\nEvent target data respresent a @pluginType clusterer/InputMarker in case of marker event or an array of @pluginType clusterer/InputMarker markers contained in a cluster, on which this event has been emitted.</p>\n<p>In the example below the modal dialog box appear with event target type value when marker or cluster is clicked:</p>\n<pre><code class=\"language-js\">clusterer.on(&#39;click&#39;, (event) =&gt; {\n    alert(`${event.target.type} is clicked`);\n});</code></pre>\n",{"tag":"example","value":"examples/clustering/clustererEventHandling.html"},"<h1 id=\"markers-customization\">Markers customization</h1>\n<p>Your @pluginType clusterer/InputMarker can be customized by modifying icons (<code>icon</code> or <code>hoverIcon</code>) and icons position relative to the marker coordinates (<code>anchor</code> or <code>hoverAnchor</code>), also by resizing icons (<code>size</code> or <code>hoverSize</code>).</p>\n<p>In the example below the markers have modified icons and their size for normal and hover states:</p>\n<pre><code class=\"language-js\">const markers = [\n    {\n        coordinates: [55.27887, 25.21001],\n        icon: &#39;https://mapgl.2gis.com/api/examples/marker.svg&#39;,\n        hoverIcon: &#39;https://mapgl.2gis.com/api/examples/markerHover.svg&#39;,\n        size: [36, 36],\n        hoverSize: [46, 46],\n    },\n    {\n        // The icon of this marker will grow in size on hover.\n        coordinates: [55.30771, 25.20314],\n        icon: &#39;https://mapgl.2gis.com/api/examples/marker.svg&#39;,\n        hoverIcon: &#39;https://mapgl.2gis.com/api/examples/marker.svg&#39;,\n        size: [42, 42],\n        hoverSize: [48, 48],\n    },\n    {\n        coordinates: [55.35266, 25.24382],\n        icon: &#39;https://mapgl.2gis.com/api/examples/marker.svg&#39;,\n        hoverIcon: &#39;https://mapgl.2gis.com/api/examples/markerHover.svg&#39;,\n        size: [44, 44],\n        hoverSize: [50, 50],\n    },\n    ...\n];\n\nclusterer.load(markers);</code></pre>\n",{"tag":"example","value":"examples/clustering/customMarkers.html"},"<p>You can also pass custom properties to markers. Such properties can be used in the clusterer events handling, for example.</p>\n<h1 id=\"clusters-customization\">Clusters customization</h1>\n<p>A @pluginType clusterer/ClusterStyle is set in the @pluginType clusterer/ClustererOptions.\nIn terms of structure, a cluster is a set of an icon and a text (label) indicating the number of markers in this cluster.\nFor cluster icon customizing the same mechanism is used as in marker.</p>\n<p>To modify label appearance you can set:\n<code>labelColor</code> - text color;\n<code>labelFontSize</code> - text font size;\n<code>labelHaloRadius</code> - letters background radius of the text;\n<code>labelHaloColor</code> -  letters background color of the text;\n<code>labelLetterSpacing</code> - space between letters of the text;\n<code>labelAnchor</code> - text position binding to a point of the map.</p>\n<p>To set the uniform style for all clusters you need to pass a @pluginType clusterer/ClusterStyle object to the options of the clusterer when its instantiation.</p>\n<p>For example, the following is the style that has modified normal and hover icons, text color and text font size. This style applies for all clusters:</p>\n<pre><code class=\"language-js\">const clusterer = new mapgl.Clusterer(map, {\n    clusterStyle: {\n        icon: &#39;https://mapgl.2gis.com/api/examples/cluster.svg&#39;,\n        hoverIcon: &#39;https://mapgl.2gis.com/api/examples/clusterHover.svg&#39;,\n        labelColor: &#39;#ffffff&#39;,\n        labelFontSize: 16,\n    },\n});</code></pre>\n",{"tag":"example","value":"examples/clustering/objectClusterStyle.html"},"<p>Also you can set different styles for clusters based on the number of markers in them.\nFor that you need to pass a function as a style, which returns a @pluginType clusterer/ClusterStyle object.</p>\n<p>In the example below the function returns different styles for a cluster containing from 3 markers and less:</p>\n<pre><code class=\"language-js\">function clusterStyle(pointsCount) {\n    if (pointsCount &lt; 3) {\n        return {\n            icon: &#39;https://mapgl.2gis.com/api/examples/cluster.svg&#39;,\n            hoverIcon: &#39;https://mapgl.2gis.com/api/examples/cluster.svg&#39;,\n            size: [25, 25],\n            hoverSize: [35, 35],\n            labelColor: &#39;#ffffff&#39;,\n            labelFontSize: 12,\n        };\n    }\n\n    return {\n        icon: &#39;https://mapgl.2gis.com/api/examples/clusterHover.svg&#39;,\n        hoverIcon: &#39;https://mapgl.2gis.com/api/examples/clusterHover.svg&#39;,\n        size: [35, 35],\n        hoverSize: [45, 45],\n        labelColor: &#39;#ffffff&#39;,\n        labelFontSize: 16,\n    };\n}\n\nconst clusterer = new mapgl.Clusterer(map, {\n    clusterStyle,\n});</code></pre>\n",{"tag":"example","value":"examples/clustering/functionClusterStyle.html"},"<h1 id=\"all-features-together\">All features together</h1>\n",{"tag":"example","value":"examples/clustering/fullExample.html"}],"contentsRaw":"\n@# Clustering\n\n# Clustering\n\nThe marker clustering helps you to manage multiple markers at different zoom levels. When a user views the map at a high zoom level, the individual markers show on the map. When the user zooms out, the markers gather together into clusters, to make viewing the map easier.\nIf you have a lot of markers on the map, it’s better to use a clustering to organize them better visually.\n\n# Installation\n\nTo add marker clustering functionality to the @type Map you need to include the clustering plugin JS file after MapGL API file using unpkg CDN:\n\n```html\n<script src=\"https://unpkg.com/@2gis/mapgl-clusterer@^1/dist/clustering.js\"></script>\n```\n\nOr using NPM:\n\n```\nnpm install @2gis/mapgl-clusterer\n```\n\n# Usage\n\nFirst you need to instantiate the @pluginType clusterer/Clusterer.\n\nIf you install the clustering plugin using NPM, you can import the @pluginType clusterer/Clusterer to your project as shown below:\n\n```js\n// import as an ES module\nimport { Clusterer } from '@2gis/mapgl-clusterer';\n\n// or as a CommonJS module\nconst { Clusterer } = require('@2gis/mapgl-clusterer');\n\nconst clusterer = new Clusterer(map, {\n    radius: 60,\n});\n```\n\nIf you use unpkg CDN, you need to instantiate the @pluginType clusterer/Clusterer via the global object `mapgl`:\n\n```js\nconst clusterer = new mapgl.Clusterer(map, {\n    radius: 60,\n});\n```\n\nThe first argument of the @pluginType clusterer/Clusterer constructor is an instance of the @type Map, the second - @pluginType clusterer/ClustererOptions.\n\nThe clusterer is ready to go. The next step will be markers loading.\nTo add markers to the clusterer you need to use the `load` method.\nAs an argument this method takes an array of @pluginType clusterer/InputMarker markers.\n\nIn the example below the markers will be added to the clusterer with default styles:\n\n```js\nconst markers = [\n    { coordinates: [55.27887, 25.21001] },\n    { coordinates: [55.30771, 25.20314] },\n    { coordinates: [55.35266, 25.24382] },\n    ...\n];\n\nclusterer.load(markers);\n```\n\nThe markers passed to the clusterer will display on the map:\n\n@example examples/clustering/defaultMarkers.html\n\nTo reload the markers in the clusterer you need to call the `load` method again, but with a new array of markers.\nNew markers will display on the map immediately:\n\n```js\nconst newMarkers = [\n    { coordinates: [55.1234, 25.4321] },\n    ...\n];\n\nclusterer.load(newMarkers);\n```\n\nIf the clusterer is no longer needed you can destroy it by using the `destroy` method:\n\n```js\nclusterer.destroy();\n```\n\n# Event handling\n\nThe clusterer can emit events described in the @pluginType clusterer/ClustererEventTable. You can add handlers for them.\n\nFor example, on click event:\n\n```js\nclusterer.on('click', (event) => {\n    // do something\n});\n```\n\nAs an argument the handler accepts a @pluginType clusterer/ClustererPointerEvent.\nA clusterer event target can be either a @pluginType clusterer/MarkerTarget or a @pluginType clusterer/ClusterTarget.\nEvent target data respresent a @pluginType clusterer/InputMarker in case of marker event or an array of @pluginType clusterer/InputMarker markers contained in a cluster, on which this event has been emitted.\n\nIn the example below the modal dialog box appear with event target type value when marker or cluster is clicked:\n\n```js\nclusterer.on('click', (event) => {\n    alert(`${event.target.type} is clicked`);\n});\n```\n\n@example examples/clustering/clustererEventHandling.html\n\n# Markers customization\n\nYour @pluginType clusterer/InputMarker can be customized by modifying icons (`icon` or `hoverIcon`) and icons position relative to the marker coordinates (`anchor` or `hoverAnchor`), also by resizing icons (`size` or `hoverSize`).\n\nIn the example below the markers have modified icons and their size for normal and hover states:\n\n```js\nconst markers = [\n    {\n        coordinates: [55.27887, 25.21001],\n        icon: 'https://mapgl.2gis.com/api/examples/marker.svg',\n        hoverIcon: 'https://mapgl.2gis.com/api/examples/markerHover.svg',\n        size: [36, 36],\n        hoverSize: [46, 46],\n    },\n    {\n        // The icon of this marker will grow in size on hover.\n        coordinates: [55.30771, 25.20314],\n        icon: 'https://mapgl.2gis.com/api/examples/marker.svg',\n        hoverIcon: 'https://mapgl.2gis.com/api/examples/marker.svg',\n        size: [42, 42],\n        hoverSize: [48, 48],\n    },\n    {\n        coordinates: [55.35266, 25.24382],\n        icon: 'https://mapgl.2gis.com/api/examples/marker.svg',\n        hoverIcon: 'https://mapgl.2gis.com/api/examples/markerHover.svg',\n        size: [44, 44],\n        hoverSize: [50, 50],\n    },\n    ...\n];\n\nclusterer.load(markers);\n```\n\n@example examples/clustering/customMarkers.html\n\nYou can also pass custom properties to markers. Such properties can be used in the clusterer events handling, for example.\n\n# Clusters customization\n\nA @pluginType clusterer/ClusterStyle is set in the @pluginType clusterer/ClustererOptions.\nIn terms of structure, a cluster is a set of an icon and a text (label) indicating the number of markers in this cluster.\nFor cluster icon customizing the same mechanism is used as in marker.\n\nTo modify label appearance you can set:\n`labelColor` - text color;\n`labelFontSize` - text font size;\n`labelHaloRadius` - letters background radius of the text;\n`labelHaloColor` -  letters background color of the text;\n`labelLetterSpacing` - space between letters of the text;\n`labelAnchor` - text position binding to a point of the map.\n\nTo set the uniform style for all clusters you need to pass a @pluginType clusterer/ClusterStyle object to the options of the clusterer when its instantiation.\n\nFor example, the following is the style that has modified normal and hover icons, text color and text font size. This style applies for all clusters:\n\n```js\nconst clusterer = new mapgl.Clusterer(map, {\n    clusterStyle: {\n        icon: 'https://mapgl.2gis.com/api/examples/cluster.svg',\n        hoverIcon: 'https://mapgl.2gis.com/api/examples/clusterHover.svg',\n        labelColor: '#ffffff',\n        labelFontSize: 16,\n    },\n});\n```\n\n@example examples/clustering/objectClusterStyle.html\n\nAlso you can set different styles for clusters based on the number of markers in them.\nFor that you need to pass a function as a style, which returns a @pluginType clusterer/ClusterStyle object.\n\nIn the example below the function returns different styles for a cluster containing from 3 markers and less:\n\n```js\nfunction clusterStyle(pointsCount) {\n    if (pointsCount < 3) {\n        return {\n            icon: 'https://mapgl.2gis.com/api/examples/cluster.svg',\n            hoverIcon: 'https://mapgl.2gis.com/api/examples/cluster.svg',\n            size: [25, 25],\n            hoverSize: [35, 35],\n            labelColor: '#ffffff',\n            labelFontSize: 12,\n        };\n    }\n\n    return {\n        icon: 'https://mapgl.2gis.com/api/examples/clusterHover.svg',\n        hoverIcon: 'https://mapgl.2gis.com/api/examples/clusterHover.svg',\n        size: [35, 35],\n        hoverSize: [45, 45],\n        labelColor: '#ffffff',\n        labelFontSize: 16,\n    };\n}\n\nconst clusterer = new mapgl.Clusterer(map, {\n    clusterStyle,\n});\n```\n\n@example examples/clustering/functionClusterStyle.html\n\n# All features together\n\n@example examples/clustering/fullExample.html","metadata":{"title":"Clustering"}},"controls":{"reference":"controls","route":"controls","sourcePath":"docs/mapgl-api/controls.md","title":"Controls","contents":[{"tag":"heading","value":"Controls","level":1,"route":"controls"},"<h1 id=\"zoom-control\">Zoom control</h1>\n<p>The map comes with a built-in zoom control. It is enabled by default. If you want to disable it, you can do so by setting <code>zoomControl</code> map option to <code>false</code>:</p>\n<pre><code class=\"language-js\">const map = new mapgl.Map(&#39;container&#39;, {\n    ...\n    zoomControl: false,\n    ...\n});</code></pre>\n<p>If you want to set a different position for the zoom control, disable it via map options and then create it manually by creating an instance of the @type ZoomControl class:</p>\n<pre><code class=\"language-js\">const map = new mapgl.Map(&#39;container&#39;, {\n    ...\n    zoomControl: false,\n    ...\n});\n\nconst zoomControl = new mapgl.ZoomControl(map, {\n    position: &#39;bottomLeft&#39;,\n});</code></pre>\n",{"tag":"example","value":"examples/controls/zoom.html"},"<h1 id=\"traffic-control\">Traffic control</h1>\n<p>You can add a traffic control to the map by creating an instance of the @type TrafficControl class. This control allows you to see the traffic condition at the moment and its average score.</p>\n<pre><code class=\"language-js\">const trafficControl = new mapgl.TrafficControl(map, {\n    position: &#39;topRight&#39;,\n});</code></pre>\n",{"tag":"example","value":"examples/controls/traffic.html"},"<h1 id=\"custom-control\">Custom control</h1>\n<p>Use the code below to add a custom @type Control:</p>\n<pre><code class=\"language-js\">const control = new mapgl.Control(map, &#39;&lt;button&gt;Custom control&lt;/button&gt;&#39;, {\n    position: &#39;topLeft&#39;,\n});</code></pre>\n<p>The second argument takes HTML markup string that will be added to the control&#39;s wrap HTML container.</p>\n<p>The last argument takes @type ControlOptions.</p>\n<p>See @type Control for more details.</p>\n<p>You can attach event listeners to control&#39;s inner HTML elements the same way as for the usual HTML elements.\nTo do this you need to get reference to required inner HTML element and attach an appropriate event listener to it.\nFor example, attach click event listener to button HTML element:</p>\n<pre><code class=\"language-js\">control\n    .getContainer() // Get a control&#39;s wrap\n    .querySelector(&#39;button&#39;) // Get an inner button HTML element reference\n    .addEventListener(&#39;click&#39;, (ev) =&gt; { /* do something */ }); // Attach an event listener to the button on the &#39;click&#39; event</code></pre>\n",{"tag":"example","value":"examples/controls/custom.html"}],"contentsRaw":"\n@# Controls\n\n# Zoom control\n\nThe map comes with a built-in zoom control. It is enabled by default. If you want to disable it, you can do so by setting `zoomControl` map option to `false`:\n\n```js\nconst map = new mapgl.Map('container', {\n    ...\n    zoomControl: false,\n    ...\n});\n```\n\nIf you want to set a different position for the zoom control, disable it via map options and then create it manually by creating an instance of the @type ZoomControl class:\n\n```js\nconst map = new mapgl.Map('container', {\n    ...\n    zoomControl: false,\n    ...\n});\n\nconst zoomControl = new mapgl.ZoomControl(map, {\n    position: 'bottomLeft',\n});\n```\n\n@example examples/controls/zoom.html\n\n# Traffic control\n\nYou can add a traffic control to the map by creating an instance of the @type TrafficControl class. This control allows you to see the traffic condition at the moment and its average score.\n\n```js\nconst trafficControl = new mapgl.TrafficControl(map, {\n    position: 'topRight',\n});\n```\n\n@example examples/controls/traffic.html\n\n# Custom control\n\nUse the code below to add a custom @type Control:\n\n```js\nconst control = new mapgl.Control(map, '<button>Custom control</button>', {\n    position: 'topLeft',\n});\n```\n\nThe second argument takes HTML markup string that will be added to the control's wrap HTML container.\n\nThe last argument takes @type ControlOptions.\n\nSee @type Control for more details.\n\nYou can attach event listeners to control's inner HTML elements the same way as for the usual HTML elements.\nTo do this you need to get reference to required inner HTML element and attach an appropriate event listener to it.\nFor example, attach click event listener to button HTML element:\n\n```js\ncontrol\n    .getContainer() // Get a control's wrap\n    .querySelector('button') // Get an inner button HTML element reference\n    .addEventListener('click', (ev) => { /* do something */ }); // Attach an event listener to the button on the 'click' event\n```\n\n@example examples/controls/custom.html","metadata":{"title":"Controls"}},"directions":{"reference":"directions","route":"directions","sourcePath":"docs/mapgl-api/directions.md","title":"Directions","contents":[{"tag":"heading","value":"Directions","level":1,"route":"directions"},"<h1 id=\"directions\">Directions</h1>\n<p>The Directions plugin can be used to find directions through several points.</p>\n<h1 id=\"installation\">Installation</h1>\n<p>To add directions search functionality to the @type Map you need to include the @pluginType directions/Directions JS file after MapGL API file using unpkg CDN:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://unpkg.com/@2gis/mapgl-directions@^1/dist/directions.js&quot;&gt;&lt;/script&gt;</code></pre>\n<p>Or using NPM:</p>\n<pre><code>npm install @2gis/mapgl-directions</code></pre><h1 id=\"usage\">Usage</h1>\n<p>First you need to instantiate the @pluginType directions/Directions.</p>\n<p>If you install the directions plugin using NPM, you can import the @pluginType directions/Directions to your project as shown below:</p>\n<pre><code class=\"language-js\">// import as an ES module\nimport { Directions } from &#39;@2gis/mapgl-directions&#39;;\n\n// or as a CommonJS module\nconst { Directions } = require(&#39;@2gis/mapgl-directions&#39;);\n\nconst directions = new Directions(map, {\n  directionsApiKey: &#39;Your directions API Key&#39;,\n});</code></pre>\n<p>If you use unpkg CDN, you need to instantiate the @pluginType directions/Directions via the global object <code>mapgl</code>:</p>\n<pre><code class=\"language-js\">const directions = new mapgl.Directions(map, {\n  directionsApiKey: &#39;Your directions API Key&#39;,\n});</code></pre>\n<p>The first argument of the @pluginType directions/Directions constructor is an instance of the @type Map, the second - @pluginType directions/DirectionsOptions.</p>\n<p>The directions plugin needs its own key to work with API. You can get it on <a href=\"http://partner.api.2gis.ru/\">partner.api.2gis.ru</a>.</p>\n<p>Let&#39;s create a simple example of two points route search. First of all, we need to handle clicks to the map to get coordinates of points for directions search.\nFor example, a click handler will work as follows: after the first click we will store the first point in a variable, after the second click we will draw the route:</p>\n<pre><code class=\"language-js\">let firstPoint;\nlet secondPoint;\n// Current selecting point\nlet selecting = &#39;a&#39;;\n\nmap.on(&#39;click&#39;, (e) =&gt; {\n    const coords = e.lngLat;\n\n    if (selecting != &#39;end&#39;) {\n        // Just to visualize selected points, before the route is done\n        markers.push(\n            new mapgl.Marker(map, {\n                coordinates: coords,\n                icon: &#39;https://mapgl.2gis.com/api/examples/dotMarker.svg&#39;,\n            }),\n        );\n    }\n\n    if (selecting === &#39;a&#39;) {\n        firstPoint = coords;\n        selecting = &#39;b&#39;;\n    } else if (selecting === &#39;b&#39;) {\n        secondPoint = coords;\n        selecting = &#39;end&#39;;\n    }\n\n    // If all points are selected — we can draw the route\n    if (firstPoint &amp;&amp; secondPoint) {\n        directions.carRoute({\n            points: [firstPoint, secondPoint],\n        });\n        markers.forEach((m) =&gt; {\n            m.destroy();\n        });\n    }\n});</code></pre>\n<p>You can pass up to 10 points to directions.carRoute.</p>\n<h1 id=\"full-example\">Full example</h1>\n<p>Try to click the map to select points for directions search:</p>\n",{"tag":"example","value":"examples/directions/base.html"}],"contentsRaw":"\n@# Directions\n\n# Directions\n\nThe Directions plugin can be used to find directions through several points.\n\n# Installation\n\nTo add directions search functionality to the @type Map you need to include the @pluginType directions/Directions JS file after MapGL API file using unpkg CDN:\n\n```html\n<script src=\"https://unpkg.com/@2gis/mapgl-directions@^1/dist/directions.js\"></script>\n```\n\nOr using NPM:\n\n```\nnpm install @2gis/mapgl-directions\n```\n\n# Usage\n\nFirst you need to instantiate the @pluginType directions/Directions.\n\nIf you install the directions plugin using NPM, you can import the @pluginType directions/Directions to your project as shown below:\n\n```js\n// import as an ES module\nimport { Directions } from '@2gis/mapgl-directions';\n\n// or as a CommonJS module\nconst { Directions } = require('@2gis/mapgl-directions');\n\nconst directions = new Directions(map, {\n  directionsApiKey: 'Your directions API Key',\n});\n```\n\nIf you use unpkg CDN, you need to instantiate the @pluginType directions/Directions via the global object `mapgl`:\n\n```js\nconst directions = new mapgl.Directions(map, {\n  directionsApiKey: 'Your directions API Key',\n});\n```\n\nThe first argument of the @pluginType directions/Directions constructor is an instance of the @type Map, the second - @pluginType directions/DirectionsOptions.\n\nThe directions plugin needs its own key to work with API. You can get it on [partner.api.2gis.ru](http://partner.api.2gis.ru/).\n\nLet's create a simple example of two points route search. First of all, we need to handle clicks to the map to get coordinates of points for directions search.\nFor example, a click handler will work as follows: after the first click we will store the first point in a variable, after the second click we will draw the route:\n\n```js\nlet firstPoint;\nlet secondPoint;\n// Current selecting point\nlet selecting = 'a';\n\nmap.on('click', (e) => {\n    const coords = e.lngLat;\n\n    if (selecting != 'end') {\n        // Just to visualize selected points, before the route is done\n        markers.push(\n            new mapgl.Marker(map, {\n                coordinates: coords,\n                icon: 'https://mapgl.2gis.com/api/examples/dotMarker.svg',\n            }),\n        );\n    }\n\n    if (selecting === 'a') {\n        firstPoint = coords;\n        selecting = 'b';\n    } else if (selecting === 'b') {\n        secondPoint = coords;\n        selecting = 'end';\n    }\n\n    // If all points are selected — we can draw the route\n    if (firstPoint && secondPoint) {\n        directions.carRoute({\n            points: [firstPoint, secondPoint],\n        });\n        markers.forEach((m) => {\n            m.destroy();\n        });\n    }\n});\n```\n\nYou can pass up to 10 points to directions.carRoute.\n\n# Full example\n\nTry to click the map to select points for directions search:\n\n@example examples/directions/base.html","metadata":{"title":"Directions"}},"geolocation":{"reference":"geolocation","route":"geolocation","sourcePath":"docs/mapgl-api/geolocation.md","title":"Geolocation","contents":[{"tag":"heading","value":"Geolocation","level":1,"route":"geolocation"},"<h1 id=\"geolocation\">Geolocation</h1>\n<p>Simple example how you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\">Geolocation API</a> with MapGL.</p>\n",{"tag":"example","value":"examples/geolocation.html"}],"contentsRaw":"\n@# Geolocation\n\n# Geolocation\n\nSimple example how you can use [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API) with MapGL.\n\n@example examples/geolocation.html","metadata":{"title":"Geolocation"}},"geometries":{"reference":"geometries","route":"geometries","sourcePath":"docs/mapgl-api/geometries.md","title":"Geometries","contents":[{"tag":"heading","value":"Geometries","level":1,"route":"geometries"},"<h1 id=\"geometries\">Geometries</h1>\n<p>There are several base geometry objects (@type Circle, @type CircleMarker, @type Polyline, @type Polygon)\nwhich allows building complex visualizations on the map.</p>\n<h1 id=\"polyline\">Polyline</h1>\n<p>Create a @type Polyline on the map.</p>\n<pre><code class=\"language-js\">const polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [55.28770929, 25.22069944],\n        [55.28976922, 25.25656786],\n        [55.33096795, 25.22007825],\n        [55.33302789, 25.25687836],\n    ],\n    width: 10,\n    color: &#39;#00b7ff&#39;,\n});\n\npolyline.on(&#39;click&#39;, () =&gt; {\n    alert(&#39;Polyline click&#39;);\n});</code></pre>\n",{"tag":"example","value":"examples/geometries/polyline.html"},"<p>A polyline differ from all other objects in that it doesn&#39;t have strokes.\nInstead, it uses multiple &quot;layers&quot; - a layer drawn behind each other.</p>\n<p>So if you want to add strokes you should specify <code>width2</code> and calculate it like sum of <code>width</code> and doubled stroke.</p>\n<p>For example, you want stroke to be 2 pixels (px), and your main width is 10 px.\nSo doubled stroke width would be 4 px plus main width equals 14 px. This is <code>width2</code>.</p>\n<p>Same for <code>width3</code> - sum of <code>width2</code> and doubled second stroke.</p>\n<pre><code class=\"language-js\">const polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [55.28770929, 25.22069944],\n        [55.28976922, 25.25656786],\n        [55.33096795, 25.22007825],\n        [55.33302789, 25.25687836],\n    ],\n    width: 10,\n    color: &#39;#00b7ff&#39;,\n    width2: 14,\n    color2: &#39;#ffffff&#39;,\n    width3: 16,\n    color3: &#39;#000000&#39;,\n});\n\npolyline.on(&#39;click&#39;, () =&gt; {\n    alert(&#39;Polyline click&#39;);\n});</code></pre>\n",{"tag":"example","value":"examples/geometries/polylineWidth2.html"},"<h1 id=\"polygon\">Polygon</h1>\n<p>Create a @type Polygon on the map.</p>\n<p>Geometry of a polygon is described in two parts.\nFirst, you describe all outer edges and then all parts to cut from it.\nAlso, all parts should have the first and the last points the same.\nSee <code>coordinates</code> option in @type PolygonOptions for more details.</p>\n<p>In the example below we describe a square and then cut a rhombus from it:</p>\n<pre><code class=\"language-js\">const polygon = new mapgl.Polygon(map, {\n    coordinates: [\n        [\n            [55.28770929, 25.22069944],\n            [55.28976922, 25.25656786],\n            [55.33302789, 25.25687836],\n            [55.33096795, 25.22007825],\n            [55.28770929, 25.22069944],\n        ],\n        [\n            [55.29500489, 25.23979952],\n            [55.31285768, 25.25175496],\n            [55.32676225, 25.23917843],\n            [55.31062608, 25.22799820],\n            [55.29500489, 25.23979952],\n        ],\n    ],\n    color: &#39;#990000&#39;,\n    strokeWidth: 3,\n    strokeColor: &#39;#bb0000&#39;,\n});\n\npolygon.on(&#39;click&#39;, () =&gt; {\n    alert(&#39;Polygon click&#39;);\n});</code></pre>\n",{"tag":"example","value":"examples/geometries/polygon.html"},"<h1 id=\"circle\">Circle</h1>\n<p>Create a @type Circle on the map. Radius is in meters.</p>\n<pre><code class=\"language-js\">const circle = new mapgl.Circle(map, {\n    coordinates: map.getCenter(),\n    radius: 2000,\n    color: &#39;#ff000055&#39;,\n    strokeWidth: 2,\n    strokeColor: &#39;#ffffff&#39;,\n});\n\ncircle.on(&#39;click&#39;, () =&gt; {\n    alert(&#39;Circle click&#39;);\n});</code></pre>\n",{"tag":"example","value":"examples/geometries/circle.html"},"<p>If you want to specify radius in pixels use @type CircleMarker:</p>\n<pre><code class=\"language-js\">const circleMarker = new mapgl.CircleMarker(map, {\n    coordinates: map.getCenter(),\n    radius: 80,\n    color: &#39;#ff0000&#39;,\n    strokeWidth: 2,\n    strokeColor: &#39;#ffffff&#39;,\n});\n\ncircleMarker.on(&#39;click&#39;, () =&gt; {\n    alert(&#39;circleMarker click&#39;);\n});</code></pre>\n",{"tag":"example","value":"examples/geometries/circleMarker.html"},"<h1 id=\"car-route\">Car route</h1>\n<p>Now lets build a car route demo.</p>\n<p>Start with basic HTML, add a container for the map and load MapGL script:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot; /&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n        &lt;title&gt;2GIS Map API&lt;/title&gt;\n        &lt;style&gt;\n            html,\n            body,\n            #container {\n                margin: 0;\n                width: 100%;\n                height: 100%;\n                overflow: hidden;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;\n        &lt;script src=&quot;https://mapgl.2gis.com/api/js&quot;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Then init the map and prepare the data for our route splitted by segments.\nEach segment will have different color and array of points.\nAlso, the first and the last point will have a circle marker and a label (A and B):</p>\n<pre><code class=\"language-js\">const map = new mapgl.Map(&#39;container&#39;, {\n    center: [55.30095449435502, 25.26873501453329],\n    zoom: 17,\n    key: &#39;Your API access key&#39;,\n});\n\nconst segments = [\n    {\n        color: &#39;#e84646&#39;,\n        label: &#39;A&#39;,\n        coords: [\n            [55.29970489, 25.26853913],\n            [55.2994345, 25.26920691],\n            [55.29950714, 25.26936478],\n        ],\n    },\n    {\n        color: &#39;#e3e340&#39;,\n        coords: [\n            [55.29950714, 25.26936478],\n            [55.30124581, 25.26959538],\n            [55.30141272, 25.26965618],\n            [55.30191503, 25.26896923],\n        ],\n    },\n    {\n        color: &#39;#43e843&#39;,\n        label: &#39;B&#39;,\n        coords: [\n            [55.30191503, 25.26896923],\n            [55.3020634, 25.26892939],\n            [55.30233927, 25.26823968],\n        ],\n    },\n];</code></pre>\n<p>It&#39;s important to add <code>zIndex</code> for each map object,\notherwise they will be drawn different sometimes (one behind other and vise versa).</p>\n<p>So, iterate over segments and add geometries:</p>\n<pre><code class=\"language-js\">segments.forEach((segment, i) =&gt; {\n    const zIndex = segments.length - 1 - i;\n    new mapgl.Polyline(map, {\n        coordinates: segment.coords,\n        width: 10,\n        color: segment.color,\n        width2: 14,\n        color2: &#39;#ffffff&#39;,\n        zIndex,\n    });\n\n    if (segment.label) {\n        const isFirstPoint = i === 0;\n        const lastPointIndex = segment.coords.length - 1;\n        const coords = isFirstPoint\n            ? segment.coords[0]\n            : segment.coords[lastPointIndex];\n\n        new mapgl.CircleMarker(map, {\n            coordinates: coords,\n            radius: 16,\n            color: &#39;#0088ff&#39;,\n            strokeWidth: 2,\n            strokeColor: &#39;#ffffff&#39;,\n            zIndex: isFirstPoint ? 5 : 3,\n        });\n\n        new mapgl.Label(map, {\n            coordinates: coords,\n            text: segment.label,\n            fontSize: 14,\n            color: &#39;#ffffff&#39;,\n            zIndex: isFirstPoint ? 6 : 4,\n        });\n    }\n});</code></pre>\n",{"tag":"example","value":"examples/geometries/carRoute.html"}],"contentsRaw":"\n@# Geometries\n\n# Geometries\n\nThere are several base geometry objects (@type Circle, @type CircleMarker, @type Polyline, @type Polygon)\nwhich allows building complex visualizations on the map.\n\n# Polyline\n\nCreate a @type Polyline on the map.\n\n```js\nconst polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [55.28770929, 25.22069944],\n        [55.28976922, 25.25656786],\n        [55.33096795, 25.22007825],\n        [55.33302789, 25.25687836],\n    ],\n    width: 10,\n    color: '#00b7ff',\n});\n\npolyline.on('click', () => {\n    alert('Polyline click');\n});\n```\n\n@example examples/geometries/polyline.html\n\nA polyline differ from all other objects in that it doesn't have strokes.\nInstead, it uses multiple \"layers\" - a layer drawn behind each other.\n\nSo if you want to add strokes you should specify `width2` and calculate it like sum of `width` and doubled stroke.\n\nFor example, you want stroke to be 2 pixels (px), and your main width is 10 px.\nSo doubled stroke width would be 4 px plus main width equals 14 px. This is `width2`.\n\nSame for `width3` - sum of `width2` and doubled second stroke.\n\n```js\nconst polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [55.28770929, 25.22069944],\n        [55.28976922, 25.25656786],\n        [55.33096795, 25.22007825],\n        [55.33302789, 25.25687836],\n    ],\n    width: 10,\n    color: '#00b7ff',\n    width2: 14,\n    color2: '#ffffff',\n    width3: 16,\n    color3: '#000000',\n});\n\npolyline.on('click', () => {\n    alert('Polyline click');\n});\n```\n\n@example examples/geometries/polylineWidth2.html\n\n# Polygon\n\nCreate a @type Polygon on the map.\n\nGeometry of a polygon is described in two parts.\nFirst, you describe all outer edges and then all parts to cut from it.\nAlso, all parts should have the first and the last points the same.\nSee `coordinates` option in @type PolygonOptions for more details.\n\nIn the example below we describe a square and then cut a rhombus from it:\n\n```js\nconst polygon = new mapgl.Polygon(map, {\n    coordinates: [\n        [\n            [55.28770929, 25.22069944],\n            [55.28976922, 25.25656786],\n            [55.33302789, 25.25687836],\n            [55.33096795, 25.22007825],\n            [55.28770929, 25.22069944],\n        ],\n        [\n            [55.29500489, 25.23979952],\n            [55.31285768, 25.25175496],\n            [55.32676225, 25.23917843],\n            [55.31062608, 25.22799820],\n            [55.29500489, 25.23979952],\n        ],\n    ],\n    color: '#990000',\n    strokeWidth: 3,\n    strokeColor: '#bb0000',\n});\n\npolygon.on('click', () => {\n    alert('Polygon click');\n});\n```\n\n@example examples/geometries/polygon.html\n\n# Circle\n\nCreate a @type Circle on the map. Radius is in meters.\n\n```js\nconst circle = new mapgl.Circle(map, {\n    coordinates: map.getCenter(),\n    radius: 2000,\n    color: '#ff000055',\n    strokeWidth: 2,\n    strokeColor: '#ffffff',\n});\n\ncircle.on('click', () => {\n    alert('Circle click');\n});\n```\n\n@example examples/geometries/circle.html\n\nIf you want to specify radius in pixels use @type CircleMarker:\n\n```js\nconst circleMarker = new mapgl.CircleMarker(map, {\n    coordinates: map.getCenter(),\n    radius: 80,\n    color: '#ff0000',\n    strokeWidth: 2,\n    strokeColor: '#ffffff',\n});\n\ncircleMarker.on('click', () => {\n    alert('circleMarker click');\n});\n```\n\n@example examples/geometries/circleMarker.html\n\n# Car route\n\nNow lets build a car route demo.\n\nStart with basic HTML, add a container for the map and load MapGL script:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>2GIS Map API</title>\n        <style>\n            html,\n            body,\n            #container {\n                margin: 0;\n                width: 100%;\n                height: 100%;\n                overflow: hidden;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"container\"></div>\n        <script src=\"https://mapgl.2gis.com/api/js\"></script>\n    </body>\n</html>\n```\n\nThen init the map and prepare the data for our route splitted by segments.\nEach segment will have different color and array of points.\nAlso, the first and the last point will have a circle marker and a label (A and B):\n\n```js\nconst map = new mapgl.Map('container', {\n    center: [55.30095449435502, 25.26873501453329],\n    zoom: 17,\n    key: 'Your API access key',\n});\n\nconst segments = [\n    {\n        color: '#e84646',\n        label: 'A',\n        coords: [\n            [55.29970489, 25.26853913],\n            [55.2994345, 25.26920691],\n            [55.29950714, 25.26936478],\n        ],\n    },\n    {\n        color: '#e3e340',\n        coords: [\n            [55.29950714, 25.26936478],\n            [55.30124581, 25.26959538],\n            [55.30141272, 25.26965618],\n            [55.30191503, 25.26896923],\n        ],\n    },\n    {\n        color: '#43e843',\n        label: 'B',\n        coords: [\n            [55.30191503, 25.26896923],\n            [55.3020634, 25.26892939],\n            [55.30233927, 25.26823968],\n        ],\n    },\n];\n```\n\nIt's important to add `zIndex` for each map object,\notherwise they will be drawn different sometimes (one behind other and vise versa).\n\nSo, iterate over segments and add geometries:\n\n```js\nsegments.forEach((segment, i) => {\n    const zIndex = segments.length - 1 - i;\n    new mapgl.Polyline(map, {\n        coordinates: segment.coords,\n        width: 10,\n        color: segment.color,\n        width2: 14,\n        color2: '#ffffff',\n        zIndex,\n    });\n\n    if (segment.label) {\n        const isFirstPoint = i === 0;\n        const lastPointIndex = segment.coords.length - 1;\n        const coords = isFirstPoint\n            ? segment.coords[0]\n            : segment.coords[lastPointIndex];\n\n        new mapgl.CircleMarker(map, {\n            coordinates: coords,\n            radius: 16,\n            color: '#0088ff',\n            strokeWidth: 2,\n            strokeColor: '#ffffff',\n            zIndex: isFirstPoint ? 5 : 3,\n        });\n\n        new mapgl.Label(map, {\n            coordinates: coords,\n            text: segment.label,\n            fontSize: 14,\n            color: '#ffffff',\n            zIndex: isFirstPoint ? 6 : 4,\n        });\n    }\n});\n```\n\n\n@example examples/geometries/carRoute.html","metadata":{"title":"Geometries"}},"marker":{"reference":"marker","route":"marker","sourcePath":"docs/mapgl-api/marker.md","title":"Markers","contents":[{"tag":"heading","value":"Markers","level":1,"route":"marker"},"<h1 id=\"add-a-marker\">Add a marker</h1>\n<p>To add a single @type Marker:</p>\n<pre><code class=\"language-js\">const marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584]\n});</code></pre>\n",{"tag":"example","value":"examples/marker/singleMarker.html"},"<h1 id=\"add-a-marker-with-a-custom-icon\">Add a marker with a custom icon</h1>\n<p>To change default icon, you can pass <code>icon</code> option with URL:</p>\n<pre><code class=\"language-js\">const marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584],\n    icon: &#39;https://mapgl.2gis.com/api/examples/marker.svg&#39;\n});</code></pre>\n",{"tag":"example","value":"examples/marker/changedMarkerIcon.html"},"<h1 id=\"add-a-marker-with-a-label\">Add a marker with a label</h1>\n<p>To add a marker with a label, you need to pass a <code>label</code> option within @type MarkerOptions:</p>\n<pre><code class=\"language-js\">const marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584],\n    label: {\n        text: &quot;The marker&#39;s label&quot;,\n    },\n});</code></pre>\n",{"tag":"example","value":"examples/marker/labeledMarker.html"},"<h1 id=\"events\">Events</h1>\n<p>Markers can emit events.\nYou can add handlers for all @type DynamicObjectEventTable events.\nFor example, a click event handler:</p>\n<pre><code class=\"language-js\">const marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584],\n    icon: &#39;https://mapgl.2gis.com/api/examples/marker.svg&#39;\n});\n\nmarker.on(&#39;click&#39;, (e) =&gt; {\n    alert(&#39;Marker is clicked&#39;);\n});</code></pre>\n",{"tag":"example","value":"examples/marker/markerEvents.html"},"<h1 id=\"add-several-markers\">Add several markers</h1>\n<p>To add several markers you need to create @type Marker instance for each marker in a loop:</p>\n<pre><code class=\"language-js\">const coords = [\n    [55.27414804174869, 25.257576991034284],\n    [55.289254243403306, 25.211614202468652],\n    [55.34418588368302, 25.215341562259866],\n    [55.35036569359612, 25.26068195798851],\n    [55.32976632814914, 25.238324424362062],\n];\ncoords.forEach((coord) =&gt; {\n    const marker = new mapgl.Marker(map, {\n        coordinates: coord\n    });\n});</code></pre>\n",{"tag":"example","value":"examples/marker/severalMarkers.html"}],"contentsRaw":"\n@# Markers\n\n# Add a marker\n\nTo add a single @type Marker:\n\n```js\nconst marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584]\n});\n```\n\n@example examples/marker/singleMarker.html\n\n# Add a marker with a custom icon\n\nTo change default icon, you can pass `icon` option with URL:\n\n```js\nconst marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584],\n    icon: 'https://mapgl.2gis.com/api/examples/marker.svg'\n});\n```\n\n@example examples/marker/changedMarkerIcon.html\n\n\n# Add a marker with a label\n\nTo add a marker with a label, you need to pass a `label` option within @type MarkerOptions:\n\n```js\nconst marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584],\n    label: {\n        text: \"The marker's label\",\n    },\n});\n```\n\n@example examples/marker/labeledMarker.html\n\n# Events\n\nMarkers can emit events.\nYou can add handlers for all @type DynamicObjectEventTable events.\nFor example, a click event handler:\n\n```js\nconst marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584],\n    icon: 'https://mapgl.2gis.com/api/examples/marker.svg'\n});\n\nmarker.on('click', (e) => {\n    alert('Marker is clicked');\n});\n```\n\n@example examples/marker/markerEvents.html\n\n# Add several markers\n\nTo add several markers you need to create @type Marker instance for each marker in a loop:\n\n```js\nconst coords = [\n    [55.27414804174869, 25.257576991034284],\n    [55.289254243403306, 25.211614202468652],\n    [55.34418588368302, 25.215341562259866],\n    [55.35036569359612, 25.26068195798851],\n    [55.32976632814914, 25.238324424362062],\n];\ncoords.forEach((coord) => {\n    const marker = new mapgl.Marker(map, {\n        coordinates: coord\n    });\n});\n```\n\n@example examples/marker/severalMarkers.html","metadata":{"title":"Markers"}},"popups":{"reference":"popups","route":"popups","sourcePath":"docs/mapgl-api/popups.md","title":"Popups","contents":[{"tag":"heading","value":"Popups","level":1,"route":"popups"},"<h1 id=\"add-a-popup\">Add a popup</h1>\n<p>To create a popup on a map, you should use @type HtmlMarker, which creates the <a href=\"https://developer.mozilla.org/ru/docs/Web/API/HTMLElement\">HtmlElement</a> bound to the location on the map:</p>\n<pre><code class=\"language-ts\">const popup = new mapgl.HtmlMarker(map, {\n    coordinates: [55.31878, 25.23584],\n    html: `&lt;div class=&quot;popup&quot;&gt;\n        &lt;div class=&quot;popup-content&quot;&gt;\n            This is a text of the popup\n        &lt;/div&gt;\n        &lt;div class=&quot;popup-tip&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt; `,\n});</code></pre>\n<p>Also you need to add CSS styles that you want.</p>\n",{"tag":"example","value":"examples/popup/simple.html"},"<h1 id=\"events-handling\">Events handling</h1>\n<p>To create a button inside a popup and handle click events, you should get access to the HTML element of the button and add an event listener as usual for HTML:</p>\n<pre><code class=\"language-ts\">const popup = new mapgl.HtmlMarker(map, {\n    coordinates: [55.31878, 25.23584],\n    html: `&lt;div class=&quot;popup&quot;&gt;\n        &lt;div class=&quot;popup-content&quot;&gt;\n            This is a text of the popup\n            &lt;button&gt;Click me&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;popup-tip&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt; `,\n});\n\npopup\n    .getContent()\n    .querySelector(&#39;button&#39;)\n    .addEventListener(&#39;click&#39;, () =&gt; alert(&#39;The button has been clicked!&#39;));</code></pre>\n",{"tag":"example","value":"examples/popup/button.html"},"<h1 id=\"add-a-marker-with-a-popup\">Add a marker with a popup</h1>\n<p>To open a popup by clicking at a @type Marker, you need to create both entities and bind them by event handling:</p>\n<pre><code class=\"language-ts\">const marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.22438],\n});\n\nconst popupHtml = popup.getContent();\nhidePopup();\n\nmarker.on(&#39;click&#39;, () =&gt; (popupHtml.style.display = &#39;block&#39;));\n\npopupHtml.querySelector(&#39;.popup-close&#39;).addEventListener(&#39;click&#39;, hidePopup);\nmap.on(&#39;click&#39;, hidePopup);\n\nfunction hidePopup() {\n    popupHtml.style.display = &#39;none&#39;;\n}</code></pre>\n",{"tag":"example","value":"examples/popup/marker.html"},"<h1 id=\"passing-a-created-htmlelement-to-a-popup\">Passing a created HTMLElement to a popup</h1>\n<p>Also the <code>html</code> option can be passed as an HTML element to the @type HtmlMarker constructor within a @type HtmlMarkerOptions object. For example, you can create a canvas with animation inside a popup:</p>\n<pre><code class=\"language-ts\">const canvas = document.createElement(&#39;canvas&#39;);\ncanvas.width = 70;\ncanvas.height = 70;\ncanvas.style.position = &#39;absolute&#39;;\ncanvas.style.transform = &#39;translate(-50%, -50%)&#39;;\ncanvas.style.border = &#39;1px solid&#39;;\ncanvas.style.background = &#39;#fff&#39;;\nconst ctx = canvas.getContext(&#39;2d&#39;);\n\nfunction render() {\n    requestAnimationFrame(render);\n    ctx.clearRect(0, 0, 70, 70);\n    ctx.beginPath();\n    const radius = (Date.now() / 70) % 35;\n    ctx.arc(35, 35, radius, 0, Math.PI * 2);\n    ctx.stroke();\n}\nrequestAnimationFrame(render);\n\nconst popup = new mapgl.HtmlMarker(map, {\n    coordinates: [55.31878, 25.23584],\n    html: canvas,\n});</code></pre>\n",{"tag":"example","value":"examples/popup/canvas.html"}],"contentsRaw":"\n@# Popups\n\n# Add a popup\nTo create a popup on a map, you should use @type HtmlMarker, which creates the [HtmlElement](https://developer.mozilla.org/ru/docs/Web/API/HTMLElement) bound to the location on the map:\n\n```ts\nconst popup = new mapgl.HtmlMarker(map, {\n    coordinates: [55.31878, 25.23584],\n    html: `<div class=\"popup\">\n        <div class=\"popup-content\">\n            This is a text of the popup\n        </div>\n        <div class=\"popup-tip\"></div>\n    </div> `,\n});\n```\n\nAlso you need to add CSS styles that you want.\n\n@example examples/popup/simple.html\n\n# Events handling\n\nTo create a button inside a popup and handle click events, you should get access to the HTML element of the button and add an event listener as usual for HTML:\n\n```ts\nconst popup = new mapgl.HtmlMarker(map, {\n    coordinates: [55.31878, 25.23584],\n    html: `<div class=\"popup\">\n        <div class=\"popup-content\">\n            This is a text of the popup\n            <button>Click me</button>\n        </div>\n        <div class=\"popup-tip\"></div>\n    </div> `,\n});\n\npopup\n    .getContent()\n    .querySelector('button')\n    .addEventListener('click', () => alert('The button has been clicked!'));\n```\n\n@example examples/popup/button.html\n\n# Add a marker with a popup\n\nTo open a popup by clicking at a @type Marker, you need to create both entities and bind them by event handling:\n\n```ts\nconst marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.22438],\n});\n\nconst popupHtml = popup.getContent();\nhidePopup();\n\nmarker.on('click', () => (popupHtml.style.display = 'block'));\n\npopupHtml.querySelector('.popup-close').addEventListener('click', hidePopup);\nmap.on('click', hidePopup);\n\nfunction hidePopup() {\n    popupHtml.style.display = 'none';\n}\n```\n\n@example examples/popup/marker.html\n\n# Passing a created HTMLElement to a popup\n\nAlso the `html` option can be passed as an HTML element to the @type HtmlMarker constructor within a @type HtmlMarkerOptions object. For example, you can create a canvas with animation inside a popup:\n\n```ts\nconst canvas = document.createElement('canvas');\ncanvas.width = 70;\ncanvas.height = 70;\ncanvas.style.position = 'absolute';\ncanvas.style.transform = 'translate(-50%, -50%)';\ncanvas.style.border = '1px solid';\ncanvas.style.background = '#fff';\nconst ctx = canvas.getContext('2d');\n\nfunction render() {\n    requestAnimationFrame(render);\n    ctx.clearRect(0, 0, 70, 70);\n    ctx.beginPath();\n    const radius = (Date.now() / 70) % 35;\n    ctx.arc(35, 35, radius, 0, Math.PI * 2);\n    ctx.stroke();\n}\nrequestAnimationFrame(render);\n\nconst popup = new mapgl.HtmlMarker(map, {\n    coordinates: [55.31878, 25.23584],\n    html: canvas,\n});\n```\n@example examples/popup/canvas.html","metadata":{"title":"Popups"}},"quickstart":{"reference":"quickstart","route":"quickstart","sourcePath":"docs/mapgl-api/quickstart.md","title":"Quickstart","contents":[{"tag":"heading","value":"Quickstart","level":1,"route":"quickstart"},"<h1 id=\"setting-up-the-api\">Setting up the API</h1>\n<p>As a first step to use MapGL API you need to get the access key (contact us <a href=\"mailto:mapgl@2gis.com\">mapgl@2gis.com</a> if you need one).\nThen you can load the script by adding <code>script</code> tag to HTML page:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://mapgl.2gis.com/api/js&quot;&gt;&lt;/script&gt;</code></pre>\n<p>After the script loading completion the global variable <code>mapgl</code> will be added to the <code>window</code> object whether you&#39;ll be able to use the API.</p>\n<h1 id=\"creating-the-map-container\">Creating the map container</h1>\n<p>Before map initialization you need to create special HTML element:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</code></pre>\n<p>The map will be added to this element and will get its dimensions so you need to specify it in CSS:</p>\n<pre><code class=\"language-html\">&lt;style&gt;\n    #container {\n        width: 500px;\n        height: 300px;\n    }\n&lt;/style&gt;</code></pre>\n<h1 id=\"creating-the-map\">Creating the map</h1>\n<p>And finally, create the map with @type Map component by passing HTML element ID:</p>\n<pre><code class=\"language-html\">&lt;script&gt;\n    const map = new mapgl.Map(&#39;container&#39;, {\n        center: [55.31878, 25.23584],\n        zoom: 13,\n        key: &#39;Your API access key&#39;\n    });\n&lt;/script&gt;</code></pre>\n<p>The second argument takes @type MapOptions.\nIn the example above we pass initial map center (longitude, latitude), map zoom and the access key.</p>\n<h1 id=\"creating-a-marker\">Creating a marker</h1>\n<p>After map initialization you can add some elements to it.\nFor example, add @type Marker component like this:</p>\n<pre><code class=\"language-js\">const marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584]\n});</code></pre>\n<p>See @page marker for more details.</p>\n<h1 id=\"full-example\">Full example</h1>\n",{"tag":"example","value":"examples/quickstart.html"},"<h1 id=\"usage-with-npm\">Usage with NPM</h1>\n<p>You can use <a href=\"https://www.npmjs.com/package/@2gis/mapgl\">@2gis/mapgl</a> npm-package to add the map to your NodeJS application.</p>\n<p>The npm-package includes:</p>\n<ol>\n<li>Async loader for 2gis MapGL API, which allows you to be sure, that the latest MapGL API script is used.</li>\n<li>Typescript typings to work with the map in a typescript environment.</li>\n</ol>\n<p>You can get more info and an example from a <a href=\"https://www.npmjs.com/package/@2gis/mapgl\">Readme</a>.</p>\n"],"contentsRaw":"\n@# Quickstart\n\n# Setting up the API\n\nAs a first step to use MapGL API you need to get the access key (contact us mapgl@2gis.com if you need one).\nThen you can load the script by adding `script` tag to HTML page:\n\n```html\n<script src=\"https://mapgl.2gis.com/api/js\"></script>\n```\n\nAfter the script loading completion the global variable `mapgl` will be added to the `window` object whether you'll be able to use the API.\n\n# Creating the map container\n\nBefore map initialization you need to create special HTML element:\n\n```html\n<div id=\"container\"></div>\n```\n\nThe map will be added to this element and will get its dimensions so you need to specify it in CSS:\n\n```html\n<style>\n    #container {\n        width: 500px;\n        height: 300px;\n    }\n</style>\n```\n\n# Creating the map\n\nAnd finally, create the map with @type Map component by passing HTML element ID:\n\n```html\n<script>\n    const map = new mapgl.Map('container', {\n        center: [55.31878, 25.23584],\n        zoom: 13,\n        key: 'Your API access key'\n    });\n</script>\n```\n\nThe second argument takes @type MapOptions.\nIn the example above we pass initial map center (longitude, latitude), map zoom and the access key.\n\n# Creating a marker\n\nAfter map initialization you can add some elements to it.\nFor example, add @type Marker component like this:\n\n```js\nconst marker = new mapgl.Marker(map, {\n    coordinates: [55.31878, 25.23584]\n});\n```\n\nSee @page marker for more details.\n\n# Full example\n\n@example examples/quickstart.html\n\n# Usage with NPM\n\nYou can use [@2gis/mapgl](https://www.npmjs.com/package/@2gis/mapgl) npm-package to add the map to your NodeJS application.\n\nThe npm-package includes:\n1. Async loader for 2gis MapGL API, which allows you to be sure, that the latest MapGL API script is used.\n2. Typescript typings to work with the map in a typescript environment.\n\nYou can get more info and an example from a [Readme](https://www.npmjs.com/package/@2gis/mapgl).","metadata":{"title":"Quickstart"}},"react":{"reference":"react","route":"react","sourcePath":"docs/mapgl-api/react.md","title":"Usage with React","contents":[{"tag":"heading","value":"React","level":1,"route":"react"},"<h1 id=\"usage-with-react\">Usage with React</h1>\n<p>This might be not so trivial to add <code>mapgl</code> to your React application. The main problem is that React controls your HTML, and mapgl needs its own static container — a div element, for example, which won&#39;t be changed by React. Another question is — how to interact with that map?</p>\n<h2 id=\"initialization\">Initialization</h2>\n<p>Let&#39;s assume, that you have a simple React application:</p>\n<pre><code class=\"language-js\">import React from &#39;react&#39;;\nimport ReactDOM from &#39;react-dom&#39;;\n\nimport { App } from &#39;./App&#39;;\n\nconst rootElement = document.getElementById(&#39;root&#39;);\nReactDOM.render(\n  &lt;App /&gt;,\n  rootElement\n);</code></pre>\n<p>And there is the code of <code>App</code> component:</p>\n<pre><code class=\"language-js\">import React from &#39;react&#39;;\n\nexport const App = () =&gt; {\n  return (\n    &lt;div&gt;\n      My App\n    &lt;/div&gt;\n  );\n};</code></pre>\n<p><code>App</code> component is mounted inside <code>root</code> element in the HTML via ReactDOM.render. If you want to add a map to your application, you need to create a component for that map:</p>\n<pre><code class=\"language-js\">import React from &#39;react&#39;;\n\nexport const Map = () =&gt; {\n  return (\n    &lt;div className=&quot;map&quot;&gt;\n      Map will be here\n    &lt;/div&gt;\n  );\n};</code></pre>\n<p>To download a script of map initialization you can use <a href=\"https://www.npmjs.com/package/@2gis/mapgl\">@2gis/mapgl package</a> from npm or just add script with mapgl API manually. Let&#39;s add MapGL API script downloading inside useEffect of <code>Map</code> component:</p>\n<pre><code class=\"language-js\">import { load } from &#39;@2gis/mapgl&#39;;\n\nexport const Map = () =&gt; {\n  useEffect(() =&gt; {\n    let map;\n    load().then((mapglAPI) =&gt; {\n      // container — id of the div element in your html\n      map = new mapglAPI.Map(&#39;map-container&#39;, {\n          center: [55.31878, 25.23584],\n          zoom: 13,\n          key: &#39;Your API access key&#39;,\n      });\n    });\n\n    // Destroy the map on unmounted\n    return () =&gt; map &amp;&amp; map.destroy();\n  }, [])\n\n  return (\n    &lt;div&gt;\n      Map will be here\n    &lt;/div&gt;\n  );\n};</code></pre>\n<p>We can not render the map inside <code>Map</code> component directly, because React will rerender <code>Map</code> component and the div with the map instance can be destroyed. So, we need to create a component with <code>&lt;div id=&#39;map-container&#39;&gt;&lt;/div&gt;</code>, which won&#39;t be rerendered by React:</p>\n<pre><code class=\"language-js\">const MapWrapper = React.memo(() =&gt; {\n  return &lt;div id=&quot;map-container&quot; style={{ width: &#39;100%&#39;, height: &#39;100%&#39;, }}&gt;&lt;/div&gt;;\n}, () =&gt; true)</code></pre>\n<p>The function in the second argument of React.memo returns true to prevent rerendering of the component. It&#39;s like <code>shouldComponentUpdate</code> which returns false.</p>\n<p>Let&#39;s update <code>Map</code> component:</p>\n<pre><code class=\"language-js\">export const Map = () =&gt; {\n  const [mapInstance, setMapInstance] = useState();\n\n  // The code of useEffect is not changed\n  useEffect(...)\n\n  return (\n    &lt;div style={{ width: &#39;100%&#39;, height: &#39;100%&#39; }}&gt;\n      &lt;MapWrapper /&gt;\n    &lt;/div&gt;\n  );\n};</code></pre>\n<p>Everything is ready to use <code>Map</code> in <code>App</code> component:</p>\n<pre><code class=\"language-js\">export const App = () =&gt; {\n  return (\n    &lt;div style={{ width: &#39;100%&#39;, height: 400 }}&gt;\n      &lt;Map /&gt;\n    &lt;/div&gt;\n  );\n};</code></pre>\n<p>Full example of initialization of the map in a React app (do not forget to change language in js panel from &quot;javascript&quot; to &quot;Babel + JSX&quot;).</p>\n",{"tag":"example","value":"examples/react/init.html"},"<h2 id=\"interaction-with-the-map\">Interaction with the map</h2>\n<p>Let&#39;s imagine, that we need to move the map to specific coordinates by using interface of the application, outside of the map interface. For example, by clicking a button. This click has to move the map to coordinates from initialization stage.\nYou need to have an instance of the map to interact with the map. You can store it in a React context. Let&#39;s create such context:</p>\n<pre><code class=\"language-js\">const MapContext = React.createContext([undefined,  () =&gt; {}]);\nconst MapProvider = (props) =&gt; {\n  const [mapInstance, setMapInstance] = React.useState();\n\n  return (\n    &lt;MapContext.Provider value={[mapInstance, setMapInstance]}&gt;\n      {props.children}\n    &lt;/MapContext.Provider&gt;\n  );\n};</code></pre>\n<p>Ok, now we need to wrap <code>App</code> component with MapProvider to have access to the context inside children of <code>App</code> component.</p>\n<pre><code class=\"language-js\">ReactDOM.render(\n  &lt;MapProvider&gt;\n    &lt;App /&gt;\n  &lt;/MapProvider&gt;,\n  rootElement\n);</code></pre>\n<p>Now, you can store the instance of the map in the context and get it in any component you need. Let&#39;s store the instance in useEffect of <code>Map</code> component:</p>\n<pre><code class=\"language-js\">const [_, setMapInstance] = React.useContext(MapContext);\n\nuseEffect(() =&gt; {\n  let map;\n  load().then((mapglAPI) =&gt; {\n    ...\n  });\n  // Set map instance inside context\n  setMapInstance(map)\n  ...\n}, [])</code></pre>\n<p>And now we can use it everywhere:</p>\n<pre><code class=\"language-js\">export const MoveMapButton = () =&gt; {\n  const [mapInstance] = React.useContext(MapContext);\n\n  const setInitialCenter = useCallback(() =&gt; {\n    if (mapInstance) {\n      mapInstance.setCenter([55.31878, 25.23584]);\n    }\n  }, [mapInstance]);\n\n  return &lt;button onClick={setInitialCenter}&gt;Set initial center&lt;/button&gt;\n}</code></pre>\n<p>Full example of interactions with the map in a React app (do not forget to change language in js panel from &quot;javascript&quot; to &quot;Babel + JSX&quot;).</p>\n",{"tag":"example","value":"examples/react/interact.html"}],"contentsRaw":"\n@# React\n\n# Usage with React\n\nThis might be not so trivial to add `mapgl` to your React application. The main problem is that React controls your HTML, and mapgl needs its own static container — a div element, for example, which won't be changed by React. Another question is — how to interact with that map?\n\n## Initialization\n\nLet's assume, that you have a simple React application:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <App />,\n  rootElement\n);\n```\n\nAnd there is the code of `App` component:\n```js\nimport React from 'react';\n\nexport const App = () => {\n  return (\n    <div>\n      My App\n    </div>\n  );\n};\n```\n\n`App` component is mounted inside `root` element in the HTML via ReactDOM.render. If you want to add a map to your application, you need to create a component for that map:\n\n```js\nimport React from 'react';\n\nexport const Map = () => {\n  return (\n    <div className=\"map\">\n      Map will be here\n    </div>\n  );\n};\n```\n\nTo download a script of map initialization you can use [@2gis/mapgl package](https://www.npmjs.com/package/@2gis/mapgl) from npm or just add script with mapgl API manually. Let's add MapGL API script downloading inside useEffect of `Map` component:\n\n```js\nimport { load } from '@2gis/mapgl';\n\nexport const Map = () => {\n  useEffect(() => {\n    let map;\n    load().then((mapglAPI) => {\n      // container — id of the div element in your html\n      map = new mapglAPI.Map('map-container', {\n          center: [55.31878, 25.23584],\n          zoom: 13,\n          key: 'Your API access key',\n      });\n    });\n\n    // Destroy the map on unmounted\n    return () => map && map.destroy();\n  }, [])\n\n  return (\n    <div>\n      Map will be here\n    </div>\n  );\n};\n```\n\nWe can not render the map inside `Map` component directly, because React will rerender `Map` component and the div with the map instance can be destroyed. So, we need to create a component with `<div id='map-container'></div>`, which won't be rerendered by React:\n\n```js\nconst MapWrapper = React.memo(() => {\n  return <div id=\"map-container\" style={{ width: '100%', height: '100%', }}></div>;\n}, () => true)\n```\nThe function in the second argument of React.memo returns true to prevent rerendering of the component. It's like `shouldComponentUpdate` which returns false.\n\nLet's update `Map` component:\n\n```js\nexport const Map = () => {\n  const [mapInstance, setMapInstance] = useState();\n\n  // The code of useEffect is not changed\n  useEffect(...)\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      <MapWrapper />\n    </div>\n  );\n};\n```\n\nEverything is ready to use `Map` in `App` component:\n\n```js\nexport const App = () => {\n  return (\n    <div style={{ width: '100%', height: 400 }}>\n      <Map />\n    </div>\n  );\n};\n```\n\nFull example of initialization of the map in a React app (do not forget to change language in js panel from \"javascript\" to \"Babel + JSX\").\n\n@example examples/react/init.html\n\n## Interaction with the map\n\nLet's imagine, that we need to move the map to specific coordinates by using interface of the application, outside of the map interface. For example, by clicking a button. This click has to move the map to coordinates from initialization stage.\nYou need to have an instance of the map to interact with the map. You can store it in a React context. Let's create such context:\n\n```js\nconst MapContext = React.createContext([undefined,  () => {}]);\nconst MapProvider = (props) => {\n  const [mapInstance, setMapInstance] = React.useState();\n\n  return (\n    <MapContext.Provider value={[mapInstance, setMapInstance]}>\n      {props.children}\n    </MapContext.Provider>\n  );\n};\n```\n\nOk, now we need to wrap `App` component with MapProvider to have access to the context inside children of `App` component.\n```js\nReactDOM.render(\n  <MapProvider>\n    <App />\n  </MapProvider>,\n  rootElement\n);\n```\n\nNow, you can store the instance of the map in the context and get it in any component you need. Let's store the instance in useEffect of `Map` component:\n```js\nconst [_, setMapInstance] = React.useContext(MapContext);\n\nuseEffect(() => {\n  let map;\n  load().then((mapglAPI) => {\n    ...\n  });\n  // Set map instance inside context\n  setMapInstance(map)\n  ...\n}, [])\n```\n\nAnd now we can use it everywhere:\n\n```js\nexport const MoveMapButton = () => {\n  const [mapInstance] = React.useContext(MapContext);\n\n  const setInitialCenter = useCallback(() => {\n    if (mapInstance) {\n      mapInstance.setCenter([55.31878, 25.23584]);\n    }\n  }, [mapInstance]);\n\n  return <button onClick={setInitialCenter}>Set initial center</button>\n}\n```\n\nFull example of interactions with the map in a React app (do not forget to change language in js panel from \"javascript\" to \"Babel + JSX\").\n\n@example examples/react/interact.html","metadata":{"title":"Usage with React"}},"selection":{"reference":"selection","route":"selection","sourcePath":"docs/mapgl-api/selection.md","title":"Object selection","contents":[{"tag":"heading","value":"Object selection","level":1,"route":"selection"},"<h1 id=\"object-selection\">Object selection</h1>\n<p>You can select objects on the map, such as buildings, roads and others.</p>\n<p>For selection you need to get a unique identifier of an object through a mouse and touch events handling.\nSee the <code>target</code> property of the @type MapPointerEvent.</p>\n<p>To select an object, pass its identifier to the <code>setSelectedObjects</code> method:</p>\n<pre><code class=\"language-js\">map.setSelectedObjects([id]);</code></pre>\n<p>To select more objects, pass an array of their identifiers:</p>\n<pre><code class=\"language-js\">map.setSelectedObjects([id1, id2]);</code></pre>\n<p>To unselect all objects, call this method with no arguments:</p>\n<pre><code class=\"language-js\">map.setSelectedObjects();</code></pre>\n<p>For example, a selection of objects by click on the map layer. To unselect an object, click on it again.</p>\n<pre><code class=\"language-js\">let selectedIds = [];\n\nmap.on(&#39;click&#39;, (e) =&gt; {\n    if (!e.target) {\n        return;\n    }\n\n    const { id } = e.target;\n\n    if (selectedIds.includes(id)) {\n        selectedIds = selectedIds.filter((i) =&gt; i !== id);\n    } else {\n        selectedIds.push(id);\n    }\n\n    map.setSelectedObjects(selectedIds);\n});</code></pre>\n",{"tag":"example","value":"examples/selection.html"}],"contentsRaw":"\n@# Object selection\n\n# Object selection\n\nYou can select objects on the map, such as buildings, roads and others.\n\nFor selection you need to get a unique identifier of an object through a mouse and touch events handling.\nSee the `target` property of the @type MapPointerEvent.\n\nTo select an object, pass its identifier to the `setSelectedObjects` method:\n\n```js\nmap.setSelectedObjects([id]);\n```\n\nTo select more objects, pass an array of their identifiers:\n\n```js\nmap.setSelectedObjects([id1, id2]);\n```\n\nTo unselect all objects, call this method with no arguments:\n\n```js\nmap.setSelectedObjects();\n```\n\nFor example, a selection of objects by click on the map layer. To unselect an object, click on it again.\n\n```js\nlet selectedIds = [];\n\nmap.on('click', (e) => {\n    if (!e.target) {\n        return;\n    }\n\n    const { id } = e.target;\n\n    if (selectedIds.includes(id)) {\n        selectedIds = selectedIds.filter((i) => i !== id);\n    } else {\n        selectedIds.push(id);\n    }\n\n    map.setSelectedObjects(selectedIds);\n});\n```\n\n@example examples/selection.html","metadata":{"title":"Object selection"}},"tooltips":{"reference":"tooltips","route":"tooltips","sourcePath":"docs/mapgl-api/tooltips.md","title":"Tooltips","contents":[{"tag":"heading","value":"Tooltips","level":1,"route":"tooltips"},"<h1 id=\"tooltips\">Tooltips</h1>\n<p>The tooltip is a common graphical user interface element. The user hovers the pointer/mouse cursor over a marker/geometry, without clicking it, and the tooltip may appear.</p>\n<h1 id=\"marker-tooltip\">Marker tooltip</h1>\n<p>First of all, you should create a marker on the map. Follow instructions from the @page marker article.</p>\n<p>Markers can emit events. So, you can add <code>mouseover</code> and <code>mouseout</code> event handlers to your marker:</p>\n<pre><code class=\"language-ts\">// Will be triggered, when the cursor will be over the marker\nmarker.on(&#39;mouseover&#39;, (e) =&gt; {\n    console.log(&#39;mouseover&#39;);\n});\n\n// Will be triggered, when the cursor will be out of the marker\nmarker.on(&#39;mouseout&#39;, (e) =&gt; {\n    console.log(&#39;mouseout&#39;);\n});</code></pre>\n<p>The main idea is to show a tooltip on <code>mouseover</code> and hide it on <code>mouseout</code>. Every event handler&#39;s callback accepts a single parameter — <code>event</code>, describing the event which has occurred with info like screen points (x, y) and coordinates (lng, lat) of the event.</p>\n<p>Tooltip can be any HTML element with any CSS you want. You can create it dynamically or add into the document manually. In the example below we describe the simplest version of the tooltip:</p>\n<pre><code class=\"language-html\">&lt;style&gt;\n  #tooltip {\n    padding: 20px 40px;\n    background: #fff;\n    display: none;\n    position: fixed;\n    pointer-events: none;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;tooltip&quot;&gt;Hello, world!&lt;/div&gt;</code></pre>\n<p>Tooltip should be hidden by default and positioned absolutely or fixed. Such positioning is required to show a tooltip over the map.</p>\n<p>Now you can upgrade <code>mouseover</code> and <code>mouseout</code> event handlers. On <code>mouseover</code> you can show the tooltip at the point, which can be taken from <code>event</code> parameter. On <code>mouseout</code> you can set display to <code>none</code> to hide the tooltip. Also, you need to set <code>pointer-events</code> to <code>none</code>, cause your tooltip will appear exactly under the mouse cursor and <code>mouseout</code> will be triggered.\nAnother approach is to add a small offset to <code>top</code> and <code>left</code> in CSS to shift from the event point. You can use both of them for the best view.</p>\n<pre><code class=\"language-ts\">const tooltipEl = document.getElementById(&#39;tooltip&#39;);\n\nmarker.on(&#39;mouseover&#39;, (event) =&gt; {\n  // Offset in pixels\n  const offset = 5;\n\n  tooltipEl.style.top = `${event.point[1] + offset}px`;\n  tooltipEl.style.left = `${event.point[0] + offset}px`;\n  tooltipEl.style.display = &#39;block&#39;;\n});\n\nmarker.on(&#39;mouseout&#39;, (e) =&gt; {\n  tooltipEl.style.display = &#39;none&#39;;\n});</code></pre>\n<p>Your tooltip will be shown up while mouse cursor is over the marker.</p>\n<p>This is the simplest example of the tooltip. You can add some logic for more clever positioning near screen borders, more CSS, etc.</p>\n<p>So, you can show any HTML above the map with such approach.</p>\n<p>Full example of creating a tooltip for a marker. Put your mouse cursor over the marker to see the tooltip.</p>\n",{"tag":"example","value":"examples/tooltip/marker.html"},"<h1 id=\"geometry-tooltip\">Geometry tooltip</h1>\n<p>You can add a tooltip to any type of geometries. The approach the same as with markers: show tooltip on <code>mouseover</code> and hide it on <code>mouseout</code>.</p>\n<p>Full example of creating a tooltip for a polyline. Put your mouse cursor over the polyline to see the tooltip.</p>\n",{"tag":"example","value":"examples/tooltip/geometry.html"}],"contentsRaw":"\n@# Tooltips\n\n# Tooltips\n\nThe tooltip is a common graphical user interface element. The user hovers the pointer/mouse cursor over a marker/geometry, without clicking it, and the tooltip may appear.\n\n# Marker tooltip\n\nFirst of all, you should create a marker on the map. Follow instructions from the @page marker article.\n\nMarkers can emit events. So, you can add `mouseover` and `mouseout` event handlers to your marker:\n\n```ts\n// Will be triggered, when the cursor will be over the marker\nmarker.on('mouseover', (e) => {\n    console.log('mouseover');\n});\n\n// Will be triggered, when the cursor will be out of the marker\nmarker.on('mouseout', (e) => {\n    console.log('mouseout');\n});\n```\n\nThe main idea is to show a tooltip on `mouseover` and hide it on `mouseout`. Every event handler's callback accepts a single parameter — `event`, describing the event which has occurred with info like screen points (x, y) and coordinates (lng, lat) of the event.\n\nTooltip can be any HTML element with any CSS you want. You can create it dynamically or add into the document manually. In the example below we describe the simplest version of the tooltip:\n\n```html\n<style>\n  #tooltip {\n    padding: 20px 40px;\n    background: #fff;\n    display: none;\n    position: fixed;\n    pointer-events: none;\n  }\n</style>\n<div id=\"tooltip\">Hello, world!</div>\n```\nTooltip should be hidden by default and positioned absolutely or fixed. Such positioning is required to show a tooltip over the map.\n\nNow you can upgrade `mouseover` and `mouseout` event handlers. On `mouseover` you can show the tooltip at the point, which can be taken from `event` parameter. On `mouseout` you can set display to `none` to hide the tooltip. Also, you need to set `pointer-events` to `none`, cause your tooltip will appear exactly under the mouse cursor and `mouseout` will be triggered.\nAnother approach is to add a small offset to `top` and `left` in CSS to shift from the event point. You can use both of them for the best view.\n\n```ts\nconst tooltipEl = document.getElementById('tooltip');\n\nmarker.on('mouseover', (event) => {\n  // Offset in pixels\n  const offset = 5;\n\n  tooltipEl.style.top = `${event.point[1] + offset}px`;\n  tooltipEl.style.left = `${event.point[0] + offset}px`;\n  tooltipEl.style.display = 'block';\n});\n\nmarker.on('mouseout', (e) => {\n  tooltipEl.style.display = 'none';\n});\n```\n\nYour tooltip will be shown up while mouse cursor is over the marker.\n\nThis is the simplest example of the tooltip. You can add some logic for more clever positioning near screen borders, more CSS, etc.\n\nSo, you can show any HTML above the map with such approach.\n\nFull example of creating a tooltip for a marker. Put your mouse cursor over the marker to see the tooltip.\n\n@example examples/tooltip/marker.html\n\n# Geometry tooltip\n\nYou can add a tooltip to any type of geometries. The approach the same as with markers: show tooltip on `mouseover` and hide it on `mouseout`.\n\nFull example of creating a tooltip for a polyline. Put your mouse cursor over the polyline to see the tooltip.\n\n@example examples/tooltip/geometry.html","metadata":{"title":"Tooltips"}}},"typescript":{"LngLatBoundsClass":{"documentation":{"contents":["<p>A <code>LngLatBoundsClass</code> class represents a geographical bounding box (LngLatBounds),\ndefined by its southwest and northeast points in longitude and latitude\nwith some additional methods</p>\n"],"contentsRaw":"A `LngLatBoundsClass` class represents a geographical bounding box (LngLatBounds),\ndefined by its southwest and northeast points in longitude and latitude\nwith some additional methods","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"LngLatBoundsClass","implements":["LngLatBounds"],"methods":[{"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"extend","signatures":[{"documentation":{"contents":["<p>Extend the bounds to include a given point.</p>\n"],"contentsRaw":"Extend the bounds to include a given point.","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","kind":"signature","name":"extend","parameters":[{"documentation":{"contents":["<p>The geographical coordinates <code>[lng, lat]</code>.</p>\n"],"contentsRaw":"The geographical coordinates `[lng, lat]`.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"point","type":"number[]"}],"returnType":"this","type":"(point: number[]) => this"}]}],"properties":[{"documentation":{"contents":["<p>The north-east point of the bounds <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"The north-east point of the bounds `[longitude, latitude]`.","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"northEast","type":"number[]"},{"documentation":{"contents":["<p>The south-west point of the bounds <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"The south-west point of the bounds `[longitude, latitude]`.","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"southWest","type":"number[]"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const lngLatBounds = new mapgl.LngLatBoundsClass({\n  southWest: [0, 0],\n  northEast: [1, 1],\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst lngLatBounds = new mapgl.LngLatBoundsClass({\n  southWest: [0, 0],\n  northEast: [1, 1],\n});\n```","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const lngLatBounds = new mapgl.LngLatBoundsClass({\n  southWest: [0, 0],\n  northEast: [1, 1],\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst lngLatBounds = new mapgl.LngLatBoundsClass({\n  southWest: [0, 0],\n  northEast: [1, 1],\n});\n```","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","kind":"signature","name":"new LngLatBoundsClass","parameters":[{"documentation":{"contents":["<p>southWest and northEast points</p>\n"],"contentsRaw":"southWest and northEast points","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"params","type":""}],"returnType":"LngLatBoundsClass","type":"(params: ) => LngLatBoundsClass"}]}},"Evented":{"documentation":{"contents":["<p>Event emitter</p>\n"],"contentsRaw":"Event emitter","metadata":{}},"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Evented","methods":[{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"M[K]"}],"returnType":"this","type":"(type: K, data?: M[K]) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: M[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: M[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: M[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: M[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: M[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: M[K]) => void) => this"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Event emitter class is used internally by the map.</p>\n"],"contentsRaw":"Event emitter class is used internally by the map.","metadata":{}},"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Event emitter class is used internally by the map.</p>\n"],"contentsRaw":"Event emitter class is used internally by the map.","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"new Evented","parameters":[],"returnType":"Evented","type":"() => Evented"}]}},"Marker":{"documentation":{"contents":["<p>Class for creating markers on the map.</p>\n"],"contentsRaw":"Class for creating markers on the map.","metadata":{}},"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Marker","extends":["Evented<DynamicObjectEventTable<Marker>>"],"methods":[{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the marker.</p>\n"],"contentsRaw":"Destroys the marker.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","inheritedFrom":"Evented.emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"DynamicObjectEventTable<Marker>[K]"}],"returnType":"this","type":"(type: K, data?: DynamicObjectEventTable<Marker>[K]) => this"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getCoordinates","signatures":[{"documentation":{"contents":["<p>Returns current marker center in geographical coordinates <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Returns current marker center in geographical coordinates `[longitude, latitude]`.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"getCoordinates","parameters":[],"returnType":"number[]","type":"() => number[]"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getRotation","signatures":[{"documentation":{"contents":["<p>Returns a clockwise rotation angle of the marker icon in degrees.</p>\n"],"contentsRaw":"Returns a clockwise rotation angle of the marker icon in degrees.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"getRotation","parameters":[],"returnType":"number","type":"() => number"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"hide","signatures":[{"documentation":{"contents":["<p>Hides the marker.</p>\n"],"contentsRaw":"Hides the marker.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"hide","parameters":[],"returnType":"this","type":"() => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","inheritedFrom":"Evented.off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Marker>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Marker>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","inheritedFrom":"Evented.on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Marker>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Marker>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","inheritedFrom":"Evented.once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Marker>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Marker>[K]) => void) => this"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setCoordinates","signatures":[{"documentation":{"contents":["<p>Sets the geographical center of the marker.</p>\n"],"contentsRaw":"Sets the geographical center of the marker.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"setCoordinates","parameters":[{"documentation":{"contents":["<p>Coordinates <code>[longitude, latitude]</code> where the center of the marker should be set.</p>\n"],"contentsRaw":"Coordinates `[longitude, latitude]` where the center of the marker should be set.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"coordinates","type":"number[]"}],"returnType":"this","type":"(coordinates: number[]) => this"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setHoverIcon","signatures":[{"documentation":{"contents":["<p>Sets the hover icon of the marker. If you pass empty options, the current hover just will be deleted.</p>\n"],"contentsRaw":"Sets the hover icon of the marker. If you pass empty options, the current hover just will be deleted.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"setHoverIcon","parameters":[{"documentation":{"contents":["<p>Options include icon URL, optional anchor and size.</p>\n"],"contentsRaw":"Options include icon URL, optional anchor and size.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"iconOptions","type":"MarkerIconOptions"}],"returnType":"this","type":"(iconOptions?: MarkerIconOptions) => this"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setIcon","signatures":[{"documentation":{"contents":["<p>Sets the icon of the marker.</p>\n"],"contentsRaw":"Sets the icon of the marker.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"setIcon","parameters":[{"documentation":{"contents":["<p>Options include icon URL, optional anchor and size.</p>\n"],"contentsRaw":"Options include icon URL, optional anchor and size.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"iconOptions","type":"MarkerIconOptions"}],"returnType":"this","type":"(iconOptions: MarkerIconOptions) => this"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setLabel","signatures":[{"documentation":{"contents":["<p>Sets the label of the marker. If you pass an empty label, the current one just will be deleted.</p>\n"],"contentsRaw":"Sets the label of the marker. If you pass an empty label, the current one just will be deleted.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"setLabel","parameters":[{"documentation":{"contents":["<p>Options of a new marker label.</p>\n"],"contentsRaw":"Options of a new marker label.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"labelOptions","type":"MarkerLabelOptions"}],"returnType":"this","type":"(labelOptions?: MarkerLabelOptions) => this"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setRotation","signatures":[{"documentation":{"contents":["<p>Sets the clockwise rotation of the icon.</p>\n"],"contentsRaw":"Sets the clockwise rotation of the icon.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"setRotation","parameters":[{"documentation":{"contents":["<p>Angle in degrees.</p>\n"],"contentsRaw":"Angle in degrees.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"angle","type":"number"}],"returnType":"this","type":"(angle: number) => this"}]},{"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"show","signatures":[{"documentation":{"contents":["<p>Displays hidden marker.</p>\n"],"contentsRaw":"Displays hidden marker.","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"show","parameters":[],"returnType":"this","type":"() => this"}]}],"properties":[{"documentation":{"contents":["<p>User specific data. Empty by default</p>\n"],"contentsRaw":"User specific data. Empty by default","metadata":{}},"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const marker = new mapgl.Marker(map, {\n    coordinates: map.getCenter()\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst marker = new mapgl.Marker(map, {\n    coordinates: map.getCenter()\n});\n```","metadata":{}},"fileName":"src/objects/marker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const marker = new mapgl.Marker(map, {\n    coordinates: map.getCenter()\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst marker = new mapgl.Marker(map, {\n    coordinates: map.getCenter()\n});\n```","metadata":{}},"fileName":"src/objects/marker.ts","kind":"signature","name":"new Marker","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Marker options.</p>\n"],"contentsRaw":"Marker options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"MarkerOptions"}],"returnType":"Marker","type":"(map: Map, options: MarkerOptions) => Marker"}]}},"Label":{"documentation":{"contents":["<p>Class for creating labels on the map.</p>\n"],"contentsRaw":"Class for creating labels on the map.","metadata":{}},"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Label","methods":[{"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the label.</p>\n"],"contentsRaw":"Destroys the label.","metadata":{}},"fileName":"src/objects/label.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getCoordinates","signatures":[{"documentation":{"contents":["<p>Returns geographical coordinates <code>[longitude, latitude]</code> of the label.</p>\n"],"contentsRaw":"Returns geographical coordinates `[longitude, latitude]` of the label.","metadata":{}},"fileName":"src/objects/label.ts","kind":"signature","name":"getCoordinates","parameters":[],"returnType":"number[]","type":"() => number[]"}]},{"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"hide","signatures":[{"documentation":{"contents":["<p>Hides the label.</p>\n"],"contentsRaw":"Hides the label.","metadata":{}},"fileName":"src/objects/label.ts","kind":"signature","name":"hide","parameters":[],"returnType":"this","type":"() => this"}]},{"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setCoordinates","signatures":[{"documentation":{"contents":["<p>Sets geographical coordinates of the label.</p>\n"],"contentsRaw":"Sets geographical coordinates of the label.","metadata":{}},"fileName":"src/objects/label.ts","kind":"signature","name":"setCoordinates","parameters":[{"documentation":{"contents":["<p>Coordinates <code>[longitude, latitude]</code> where the center of the label with its anchor should be set.</p>\n"],"contentsRaw":"Coordinates `[longitude, latitude]` where the center of the label with its anchor should be set.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"coordinates","type":"number[]"}],"returnType":"this","type":"(coordinates: number[]) => this"}]},{"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"show","signatures":[{"documentation":{"contents":["<p>Displays hidden label.</p>\n"],"contentsRaw":"Displays hidden label.","metadata":{}},"fileName":"src/objects/label.ts","kind":"signature","name":"show","parameters":[],"returnType":"this","type":"() => this"}]}],"properties":[{"documentation":{"contents":["<p>User specific data. Empty by default</p>\n"],"contentsRaw":"User specific data. Empty by default","metadata":{}},"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const label = new mapgl.Label(map, {\n    coordinates: map.getCenter(),\n    text: &#39;There is hope&#39;,\n    color: &#39;#ff0000&#39;,\n    fontSize: 24,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst label = new mapgl.Label(map, {\n    coordinates: map.getCenter(),\n    text: 'There is hope',\n    color: '#ff0000',\n    fontSize: 24,\n});\n```","metadata":{}},"fileName":"src/objects/label.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const label = new mapgl.Label(map, {\n    coordinates: map.getCenter(),\n    text: &#39;There is hope&#39;,\n    color: &#39;#ff0000&#39;,\n    fontSize: 24,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst label = new mapgl.Label(map, {\n    coordinates: map.getCenter(),\n    text: 'There is hope',\n    color: '#ff0000',\n    fontSize: 24,\n});\n```","metadata":{}},"fileName":"src/objects/label.ts","kind":"signature","name":"new Label","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Label options.</p>\n"],"contentsRaw":"Label options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"LabelOptions"}],"returnType":"Label","type":"(map: Map, options: LabelOptions) => Label"}]}},"HtmlMarker":{"documentation":{"contents":["<p>Class for creating an HTML marker on the map.</p>\n"],"contentsRaw":"Class for creating an HTML marker on the map.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"HtmlMarker","methods":[{"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the HTML marker.</p>\n"],"contentsRaw":"Destroys the HTML marker.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getAnchor","signatures":[{"documentation":{"contents":["<p>Returns the HTML marker&#39;s anchor in pixels.</p>\n"],"contentsRaw":"Returns the HTML marker's anchor in pixels.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"getAnchor","parameters":[],"returnType":"number[]","type":"() => number[]"}]},{"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getContent","signatures":[{"documentation":{"contents":["<p>Returns the whole HTMLElement of the marker.\nPreviously specified HTML content is a child of the element.</p>\n"],"contentsRaw":"Returns the whole HTMLElement of the marker.\nPreviously specified HTML content is a child of the element.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"getContent","parameters":[],"returnType":"HTMLElement","type":"() => HTMLElement"}]},{"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getCoordinates","signatures":[{"documentation":{"contents":["<p>Returns current position of the top-left corner of the HTML marker with its anchor in geographical coordinates <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Returns current position of the top-left corner of the HTML marker with its anchor in geographical coordinates `[longitude, latitude]`.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"getCoordinates","parameters":[],"returnType":"number[]","type":"() => number[]"}]},{"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setAnchor","signatures":[{"documentation":{"contents":["<p>Sets the anchor relative to the top-left corner of the HTML marker.</p>\n"],"contentsRaw":"Sets the anchor relative to the top-left corner of the HTML marker.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"setAnchor","parameters":[{"documentation":{"contents":["<p>An anchor of the HTML marker in pixels.</p>\n"],"contentsRaw":"An anchor of the HTML marker in pixels.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"anchor","type":"number[]"}],"returnType":"this","type":"(anchor: number[]) => this"}]},{"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setContent","signatures":[{"documentation":{"contents":["<p>Sets the HTML content of the HTML marker.</p>\n"],"contentsRaw":"Sets the HTML content of the HTML marker.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"setContent","parameters":[{"documentation":{"contents":["<p>The content that will replace the current content of the HTML marker.</p>\n"],"contentsRaw":"The content that will replace the current content of the HTML marker.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"html","type":"HTMLElement | string"}],"returnType":"this","type":"(html: HTMLElement | string) => this"}]},{"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setCoordinates","signatures":[{"documentation":{"contents":["<p>Sets the geographical coordinates of the HTML marker.</p>\n"],"contentsRaw":"Sets the geographical coordinates of the HTML marker.","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"setCoordinates","parameters":[{"documentation":{"contents":["<p>Coordinates <code>[longitude, latitude]</code> where the top-left corner of the HTML marker with its anchor should be set.</p>\n"],"contentsRaw":"Coordinates `[longitude, latitude]` where the top-left corner of the HTML marker with its anchor should be set.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"coordinates","type":"number[]"}],"returnType":"this","type":"(coordinates: number[]) => this"}]}],"properties":[{"documentation":{"contents":["<p>User specific data. Empty by default</p>\n"],"contentsRaw":"User specific data. Empty by default","metadata":{}},"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const htmlMarker = new mapgl.HtmlMarker(map, {\n    coordinates: map.getCenter(),\n    html: &#39;&lt;div&gt;Some content&lt;/div&gt;&#39;,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst htmlMarker = new mapgl.HtmlMarker(map, {\n    coordinates: map.getCenter(),\n    html: '<div>Some content</div>',\n});\n```","metadata":{}},"fileName":"src/objects/htmlMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const htmlMarker = new mapgl.HtmlMarker(map, {\n    coordinates: map.getCenter(),\n    html: &#39;&lt;div&gt;Some content&lt;/div&gt;&#39;,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst htmlMarker = new mapgl.HtmlMarker(map, {\n    coordinates: map.getCenter(),\n    html: '<div>Some content</div>',\n});\n```","metadata":{}},"fileName":"src/objects/htmlMarker.ts","kind":"signature","name":"new HtmlMarker","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>HtmlMarker options.</p>\n"],"contentsRaw":"HtmlMarker options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"HtmlMarkerOptions"}],"returnType":"HtmlMarker","type":"(map: Map, options: HtmlMarkerOptions) => HtmlMarker"}]}},"Circle":{"documentation":{"contents":["<p>Class for creating a circle on the map</p>\n"],"contentsRaw":"Class for creating a circle on the map","metadata":{}},"fileName":"src/objects/circle.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Circle","extends":["Evented<DynamicObjectEventTable<Circle>>"],"methods":[{"fileName":"src/objects/circle.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the circle</p>\n"],"contentsRaw":"Destroys the circle","metadata":{}},"fileName":"src/objects/circle.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","inheritedFrom":"Evented.emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"DynamicObjectEventTable<Circle>[K]"}],"returnType":"this","type":"(type: K, data?: DynamicObjectEventTable<Circle>[K]) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","inheritedFrom":"Evented.off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Circle>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Circle>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","inheritedFrom":"Evented.on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Circle>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Circle>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","inheritedFrom":"Evented.once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Circle>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Circle>[K]) => void) => this"}]}],"properties":[{"documentation":{"contents":["<p>User specific data. Empty by default</p>\n"],"contentsRaw":"User specific data. Empty by default","metadata":{}},"fileName":"src/objects/circle.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const circle = new mapgl.Circle(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst circle = new mapgl.Circle(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});\n```","metadata":{}},"fileName":"src/objects/circle.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const circle = new mapgl.Circle(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst circle = new mapgl.Circle(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});\n```","metadata":{}},"fileName":"src/objects/circle.ts","kind":"signature","name":"new Circle","parameters":[{"documentation":{"contents":["<p>The map instance</p>\n"],"contentsRaw":"The map instance","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Circle options</p>\n"],"contentsRaw":"Circle options","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"CircleOptions"}],"returnType":"Circle","type":"(map: Map, options: CircleOptions) => Circle"}]}},"CircleMarker":{"documentation":{"contents":["<p>Class for creating a circleMarker on the map</p>\n<p>The CircleMarker differs from the Circle in that it has radius in pixels so its instance displays the same on any zoom level</p>\n"],"contentsRaw":"Class for creating a circleMarker on the map\n\nThe CircleMarker differs from the Circle in that it has radius in pixels so its instance displays the same on any zoom level","metadata":{}},"fileName":"src/objects/circleMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"CircleMarker","extends":["Evented<DynamicObjectEventTable<CircleMarker>>"],"methods":[{"fileName":"src/objects/circleMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the circleMarker</p>\n"],"contentsRaw":"Destroys the circleMarker","metadata":{}},"fileName":"src/objects/circleMarker.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","inheritedFrom":"Evented.emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"DynamicObjectEventTable<CircleMarker>[K]"}],"returnType":"this","type":"(type: K, data?: DynamicObjectEventTable<CircleMarker>[K]) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","inheritedFrom":"Evented.off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<CircleMarker>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<CircleMarker>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","inheritedFrom":"Evented.on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<CircleMarker>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<CircleMarker>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","inheritedFrom":"Evented.once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<CircleMarker>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<CircleMarker>[K]) => void) => this"}]}],"properties":[{"documentation":{"contents":["<p>User specific data. Empty by default</p>\n"],"contentsRaw":"User specific data. Empty by default","metadata":{}},"fileName":"src/objects/circleMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const circleMarker = new mapgl.CircleMarker(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst circleMarker = new mapgl.CircleMarker(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});\n```","metadata":{}},"fileName":"src/objects/circleMarker.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const circleMarker = new mapgl.CircleMarker(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst circleMarker = new mapgl.CircleMarker(map, {\n    coordinates: map.getCenter(),\n    radius: 500,\n});\n```","metadata":{}},"fileName":"src/objects/circleMarker.ts","kind":"signature","name":"new CircleMarker","parameters":[{"documentation":{"contents":["<p>The map instance</p>\n"],"contentsRaw":"The map instance","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>CircleMarker options</p>\n"],"contentsRaw":"CircleMarker options","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"CircleMarkerOptions"}],"returnType":"CircleMarker","type":"(map: Map, options: CircleMarkerOptions) => CircleMarker"}]}},"Polyline":{"documentation":{"contents":["<p>Class for creating a polyline on the map</p>\n"],"contentsRaw":"Class for creating a polyline on the map","metadata":{}},"fileName":"src/objects/polyline.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Polyline","extends":["Evented<DynamicObjectEventTable<Polyline>>"],"methods":[{"fileName":"src/objects/polyline.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the polyline</p>\n"],"contentsRaw":"Destroys the polyline","metadata":{}},"fileName":"src/objects/polyline.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","inheritedFrom":"Evented.emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"DynamicObjectEventTable<Polyline>[K]"}],"returnType":"this","type":"(type: K, data?: DynamicObjectEventTable<Polyline>[K]) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","inheritedFrom":"Evented.off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Polyline>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Polyline>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","inheritedFrom":"Evented.on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Polyline>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Polyline>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","inheritedFrom":"Evented.once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Polyline>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Polyline>[K]) => void) => this"}]}],"properties":[{"documentation":{"contents":["<p>User specific data. Empty by default</p>\n"],"contentsRaw":"User specific data. Empty by default","metadata":{}},"fileName":"src/objects/polyline.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [82.878543, 54.975937],\n        [82.903049, 54.981333],\n        [82.929373, 54.973391],\n    ],\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [82.878543, 54.975937],\n        [82.903049, 54.981333],\n        [82.929373, 54.973391],\n    ],\n});\n```","metadata":{}},"fileName":"src/objects/polyline.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [82.878543, 54.975937],\n        [82.903049, 54.981333],\n        [82.929373, 54.973391],\n    ],\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst polyline = new mapgl.Polyline(map, {\n    coordinates: [\n        [82.878543, 54.975937],\n        [82.903049, 54.981333],\n        [82.929373, 54.973391],\n    ],\n});\n```","metadata":{}},"fileName":"src/objects/polyline.ts","kind":"signature","name":"new Polyline","parameters":[{"documentation":{"contents":["<p>The map instance</p>\n"],"contentsRaw":"The map instance","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Polyline options</p>\n"],"contentsRaw":"Polyline options","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"PolylineOptions"}],"returnType":"Polyline","type":"(map: Map, options: PolylineOptions) => Polyline"}]}},"Polygon":{"documentation":{"contents":["<p>Class for creating a polygon on the map</p>\n"],"contentsRaw":"Class for creating a polygon on the map","metadata":{}},"fileName":"src/objects/polygon.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Polygon","extends":["Evented<DynamicObjectEventTable<Polygon>>"],"methods":[{"fileName":"src/objects/polygon.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the polygon</p>\n"],"contentsRaw":"Destroys the polygon","metadata":{}},"fileName":"src/objects/polygon.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","inheritedFrom":"Evented.emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"DynamicObjectEventTable<Polygon>[K]"}],"returnType":"this","type":"(type: K, data?: DynamicObjectEventTable<Polygon>[K]) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","inheritedFrom":"Evented.off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Polygon>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Polygon>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","inheritedFrom":"Evented.on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Polygon>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Polygon>[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","inheritedFrom":"Evented.once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: DynamicObjectEventTable<Polygon>[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: DynamicObjectEventTable<Polygon>[K]) => void) => this"}]}],"properties":[{"documentation":{"contents":["<p>User specific data. Empty by default</p>\n"],"contentsRaw":"User specific data. Empty by default","metadata":{}},"fileName":"src/objects/polygon.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"}],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const polygon = new mapgl.Polygon(map, {\n    coordinates: [\n        [\n            [82.878543, 54.975937],\n            [82.903049, 54.981333],\n            [82.929373, 54.973391],\n            [82.902421, 54.996199],\n            [82.878543, 54.975937],\n        ],\n        [\n            [82.908136, 54.987526],\n            [82.899028, 54.983494],\n            [82.897673, 54.988904],\n            [82.908136, 54.987526],\n        ],\n    ],\n    color: &#39;#990000&#39;,\n    strokeColor: &#39;#bb0000&#39;,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst polygon = new mapgl.Polygon(map, {\n    coordinates: [\n        [\n            [82.878543, 54.975937],\n            [82.903049, 54.981333],\n            [82.929373, 54.973391],\n            [82.902421, 54.996199],\n            [82.878543, 54.975937],\n        ],\n        [\n            [82.908136, 54.987526],\n            [82.899028, 54.983494],\n            [82.897673, 54.988904],\n            [82.908136, 54.987526],\n        ],\n    ],\n    color: '#990000',\n    strokeColor: '#bb0000',\n});\n```","metadata":{}},"fileName":"src/objects/polygon.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const polygon = new mapgl.Polygon(map, {\n    coordinates: [\n        [\n            [82.878543, 54.975937],\n            [82.903049, 54.981333],\n            [82.929373, 54.973391],\n            [82.902421, 54.996199],\n            [82.878543, 54.975937],\n        ],\n        [\n            [82.908136, 54.987526],\n            [82.899028, 54.983494],\n            [82.897673, 54.988904],\n            [82.908136, 54.987526],\n        ],\n    ],\n    color: &#39;#990000&#39;,\n    strokeColor: &#39;#bb0000&#39;,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst polygon = new mapgl.Polygon(map, {\n    coordinates: [\n        [\n            [82.878543, 54.975937],\n            [82.903049, 54.981333],\n            [82.929373, 54.973391],\n            [82.902421, 54.996199],\n            [82.878543, 54.975937],\n        ],\n        [\n            [82.908136, 54.987526],\n            [82.899028, 54.983494],\n            [82.897673, 54.988904],\n            [82.908136, 54.987526],\n        ],\n    ],\n    color: '#990000',\n    strokeColor: '#bb0000',\n});\n```","metadata":{}},"fileName":"src/objects/polygon.ts","kind":"signature","name":"new Polygon","parameters":[{"documentation":{"contents":["<p>The map instance</p>\n"],"contentsRaw":"The map instance","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Polygon options</p>\n"],"contentsRaw":"Polygon options","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"PolygonOptions"}],"returnType":"Polygon","type":"(map: Map, options: PolygonOptions) => Polygon"}]}},"Raster":{"documentation":{"contents":["<p>Class for creating a raster on the map.</p>\n"],"contentsRaw":"Class for creating a raster on the map.","metadata":{}},"fileName":"src/objects/raster.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Raster","methods":[{"fileName":"src/objects/raster.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the raster.</p>\n"],"contentsRaw":"Destroys the raster.","metadata":{}},"fileName":"src/objects/raster.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/objects/raster.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"updateImage","signatures":[{"documentation":{"contents":["<p>Updates an image URL or size of the raster on the map.</p>\n"],"contentsRaw":"Updates an image URL or size of the raster on the map.","metadata":{}},"fileName":"src/objects/raster.ts","kind":"signature","name":"updateImage","parameters":[{"documentation":{"contents":["<p>Options that include a URL or geographical bounds.</p>\n"],"contentsRaw":"Options that include a URL or geographical bounds.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":""}],"returnType":"Promise<void>","type":"(options: ) => Promise<void>"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const raster = new mapgl.Raster(map, {\n    bounds: map.getBounds(),\n    image: {\n        url: &#39;some/url&#39;\n    },\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst raster = new mapgl.Raster(map, {\n    bounds: map.getBounds(),\n    image: {\n        url: 'some/url'\n    },\n});\n```","metadata":{}},"fileName":"src/objects/raster.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const raster = new mapgl.Raster(map, {\n    bounds: map.getBounds(),\n    image: {\n        url: &#39;some/url&#39;\n    },\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst raster = new mapgl.Raster(map, {\n    bounds: map.getBounds(),\n    image: {\n        url: 'some/url'\n    },\n});\n```","metadata":{}},"fileName":"src/objects/raster.ts","kind":"signature","name":"new Raster","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Raster options.</p>\n"],"contentsRaw":"Raster options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"RasterOptions"}],"returnType":"Raster","type":"(map: Map, options: RasterOptions) => Raster"}]}},"Control":{"documentation":{"contents":["<p>Class for the map&#39;s controls creating.</p>\n"],"contentsRaw":"Class for the map's controls creating.","metadata":{}},"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Control","methods":[{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the control.</p>\n"],"contentsRaw":"Destroys the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getContainer","signatures":[{"documentation":{"contents":["<p>Returns the container of the control.</p>\n"],"contentsRaw":"Returns the container of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getContainer","parameters":[],"returnType":"HTMLDivElement","type":"() => HTMLDivElement"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getPosition","signatures":[{"documentation":{"contents":["<p>Returns the position of the control.</p>\n"],"contentsRaw":"Returns the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getPosition","parameters":[],"returnType":"ControlPosition","type":"() => ControlPosition"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setPosition","signatures":[{"documentation":{"contents":["<p>Sets the position of the control.</p>\n"],"contentsRaw":"Sets the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"setPosition","parameters":[{"documentation":{"contents":["<p>Required position of the control.</p>\n"],"contentsRaw":"Required position of the control.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"position","type":"ControlPosition"}],"returnType":"void","type":"(position: ControlPosition) => void"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.Control(\n    map,\n    &#39;&lt;button&gt;Some text&lt;/button&gt;&#39;,\n    { position: &#39;topLeft&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.Control(\n    map,\n    '<button>Some text</button>',\n    { position: 'topLeft' },\n);\n```","metadata":{}},"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.Control(\n    map,\n    &#39;&lt;button&gt;Some text&lt;/button&gt;&#39;,\n    { position: &#39;topLeft&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.Control(\n    map,\n    '<button>Some text</button>',\n    { position: 'topLeft' },\n);\n```","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"new Control","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Control HTML content.</p>\n"],"contentsRaw":"Control HTML content.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"content","type":"string"},{"documentation":{"contents":["<p>Control options.</p>\n"],"contentsRaw":"Control options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"ControlOptions"}],"returnType":"Control","type":"(map: Map, content: string, options: ControlOptions) => Control"}]}},"ZoomControl":{"documentation":{"contents":["<p>A basic control with two buttons for zooming in and out. It is added to the\nmap by default unless you set its <code>zoomControl</code> option to <code>false</code>.</p>\n"],"contentsRaw":"A basic control with two buttons for zooming in and out. It is added to the\nmap by default unless you set its `zoomControl` option to `false`.","metadata":{}},"fileName":"src/controls/zoom/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"ZoomControl","extends":["Control"],"methods":[{"fileName":"src/controls/zoom/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the zoom control.</p>\n"],"contentsRaw":"Destroys the zoom control.","metadata":{}},"fileName":"src/controls/zoom/index.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getContainer","inheritedFrom":"Control.getContainer","signatures":[{"documentation":{"contents":["<p>Returns the container of the control.</p>\n"],"contentsRaw":"Returns the container of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getContainer","parameters":[],"returnType":"HTMLDivElement","type":"() => HTMLDivElement"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getPosition","inheritedFrom":"Control.getPosition","signatures":[{"documentation":{"contents":["<p>Returns the position of the control.</p>\n"],"contentsRaw":"Returns the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getPosition","parameters":[],"returnType":"ControlPosition","type":"() => ControlPosition"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setPosition","inheritedFrom":"Control.setPosition","signatures":[{"documentation":{"contents":["<p>Sets the position of the control.</p>\n"],"contentsRaw":"Sets the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"setPosition","parameters":[{"documentation":{"contents":["<p>Required position of the control.</p>\n"],"contentsRaw":"Required position of the control.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"position","type":"ControlPosition"}],"returnType":"void","type":"(position: ControlPosition) => void"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.ZoomControl(\n    map,\n    { position: &#39;topRight&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.ZoomControl(\n    map,\n    { position: 'topRight' },\n);\n```","metadata":{}},"fileName":"src/controls/zoom/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.ZoomControl(\n    map,\n    { position: &#39;topRight&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.ZoomControl(\n    map,\n    { position: 'topRight' },\n);\n```","metadata":{}},"fileName":"src/controls/zoom/index.ts","kind":"signature","name":"new ZoomControl","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Control options.</p>\n"],"contentsRaw":"Control options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"ControlOptions"}],"returnType":"ZoomControl","type":"(map: Map, options: ControlOptions) => ZoomControl"}]}},"TrafficControl":{"documentation":{"contents":["<p>A control for enabling a traffic layer on the map.\nIt appears on the map only if you set the <code>trafficControl</code> option within @type MapOptions to <code>true</code>.</p>\n"],"contentsRaw":"A control for enabling a traffic layer on the map.\nIt appears on the map only if you set the `trafficControl` option within @type MapOptions to `true`.","metadata":{}},"fileName":"src/controls/traffic/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"TrafficControl","extends":["Control"],"methods":[{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","inheritedFrom":"Control.destroy","signatures":[{"documentation":{"contents":["<p>Destroys the control.</p>\n"],"contentsRaw":"Destroys the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getContainer","inheritedFrom":"Control.getContainer","signatures":[{"documentation":{"contents":["<p>Returns the container of the control.</p>\n"],"contentsRaw":"Returns the container of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getContainer","parameters":[],"returnType":"HTMLDivElement","type":"() => HTMLDivElement"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getPosition","inheritedFrom":"Control.getPosition","signatures":[{"documentation":{"contents":["<p>Returns the position of the control.</p>\n"],"contentsRaw":"Returns the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getPosition","parameters":[],"returnType":"ControlPosition","type":"() => ControlPosition"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setPosition","inheritedFrom":"Control.setPosition","signatures":[{"documentation":{"contents":["<p>Sets the position of the control.</p>\n"],"contentsRaw":"Sets the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"setPosition","parameters":[{"documentation":{"contents":["<p>Required position of the control.</p>\n"],"contentsRaw":"Required position of the control.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"position","type":"ControlPosition"}],"returnType":"void","type":"(position: ControlPosition) => void"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.TrafficControl(\n    map,\n    { position: &#39;topRight&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.TrafficControl(\n    map,\n    { position: 'topRight' },\n);\n```","metadata":{}},"fileName":"src/controls/traffic/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.TrafficControl(\n    map,\n    { position: &#39;topRight&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.TrafficControl(\n    map,\n    { position: 'topRight' },\n);\n```","metadata":{}},"fileName":"src/controls/traffic/index.ts","kind":"signature","name":"new TrafficControl","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Control options.</p>\n"],"contentsRaw":"Control options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"ControlOptions"}],"returnType":"TrafficControl","type":"(map: Map, options: ControlOptions) => TrafficControl"}]}},"FloorControl":{"documentation":{"contents":["<p>A control for change floor layer level on the map.\nIt appears on the map only if you set the <code>floorControl</code> option within @type MapOptions to <code>true</code>.</p>\n"],"contentsRaw":"A control for change floor layer level on the map.\nIt appears on the map only if you set the `floorControl` option within @type MapOptions to `true`.","metadata":{}},"fileName":"src/controls/floor/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"FloorControl","extends":["Control"],"methods":[{"fileName":"src/controls/floor/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"fileName":"src/controls/floor/index.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getContainer","inheritedFrom":"Control.getContainer","signatures":[{"documentation":{"contents":["<p>Returns the container of the control.</p>\n"],"contentsRaw":"Returns the container of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getContainer","parameters":[],"returnType":"HTMLDivElement","type":"() => HTMLDivElement"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getPosition","inheritedFrom":"Control.getPosition","signatures":[{"documentation":{"contents":["<p>Returns the position of the control.</p>\n"],"contentsRaw":"Returns the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getPosition","parameters":[],"returnType":"ControlPosition","type":"() => ControlPosition"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setPosition","inheritedFrom":"Control.setPosition","signatures":[{"documentation":{"contents":["<p>Sets the position of the control.</p>\n"],"contentsRaw":"Sets the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"setPosition","parameters":[{"documentation":{"contents":["<p>Required position of the control.</p>\n"],"contentsRaw":"Required position of the control.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"position","type":"ControlPosition"}],"returnType":"void","type":"(position: ControlPosition) => void"}]}],"properties":[],"accessors":[],"constructorType":{"fileName":"src/controls/floor/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"fileName":"src/controls/floor/index.ts","kind":"signature","name":"new FloorControl","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"ControlOptions"}],"returnType":"FloorControl","type":"(map: Map, options: ControlOptions) => FloorControl"}]}},"ScaleControl":{"documentation":{"contents":["<p>A control that shows the scale line for the current map state.\nIt appears on the map only if you set the <code>scaleControl</code> option within @type MapOptions to <code>true</code>.</p>\n"],"contentsRaw":"A control that shows the scale line for the current map state.\nIt appears on the map only if you set the `scaleControl` option within @type MapOptions to `true`.","metadata":{}},"fileName":"src/controls/scale/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"ScaleControl","extends":["Control"],"methods":[{"fileName":"src/controls/scale/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the scale control.</p>\n"],"contentsRaw":"Destroys the scale control.","metadata":{}},"fileName":"src/controls/scale/index.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getContainer","inheritedFrom":"Control.getContainer","signatures":[{"documentation":{"contents":["<p>Returns the container of the control.</p>\n"],"contentsRaw":"Returns the container of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getContainer","parameters":[],"returnType":"HTMLDivElement","type":"() => HTMLDivElement"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getPosition","inheritedFrom":"Control.getPosition","signatures":[{"documentation":{"contents":["<p>Returns the position of the control.</p>\n"],"contentsRaw":"Returns the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"getPosition","parameters":[],"returnType":"ControlPosition","type":"() => ControlPosition"}]},{"fileName":"src/controls/control/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setPosition","inheritedFrom":"Control.setPosition","signatures":[{"documentation":{"contents":["<p>Sets the position of the control.</p>\n"],"contentsRaw":"Sets the position of the control.","metadata":{}},"fileName":"src/controls/control/index.ts","kind":"signature","name":"setPosition","parameters":[{"documentation":{"contents":["<p>Required position of the control.</p>\n"],"contentsRaw":"Required position of the control.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"position","type":"ControlPosition"}],"returnType":"void","type":"(position: ControlPosition) => void"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.ScaleControl(\n    map,\n    { position: &#39;topRight&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.ScaleControl(\n    map,\n    { position: 'topRight' },\n);\n```","metadata":{}},"fileName":"src/controls/scale/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const control = new mapgl.ScaleControl(\n    map,\n    { position: &#39;topRight&#39; },\n);</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst control = new mapgl.ScaleControl(\n    map,\n    { position: 'topRight' },\n);\n```","metadata":{}},"fileName":"src/controls/scale/index.ts","kind":"signature","name":"new ScaleControl","parameters":[{"documentation":{"contents":["<p>The map instance.</p>\n"],"contentsRaw":"The map instance.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Control options.</p>\n"],"contentsRaw":"Control options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"ControlOptions"}],"returnType":"ScaleControl","type":"(map: Map, options: ControlOptions) => ScaleControl"}]}},"GeoJsonSource":{"documentation":{"contents":["<p>Class for creating GeoJSON data source in the map.</p>\n"],"contentsRaw":"Class for creating GeoJSON data source in the map.","metadata":{}},"fileName":"src/sources/geoJsonSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"GeoJsonSource","methods":[{"fileName":"src/sources/geoJsonSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the source</p>\n"],"contentsRaw":"Destroys the source","metadata":{}},"fileName":"src/sources/geoJsonSource.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/sources/geoJsonSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getAttributes","signatures":[{"documentation":{"contents":["<p>Gets the source attributes</p>\n"],"contentsRaw":"Gets the source attributes","metadata":{}},"fileName":"src/sources/geoJsonSource.ts","kind":"signature","name":"getAttributes","parameters":[],"returnType":"SourceAttributes","type":"() => SourceAttributes"}]},{"fileName":"src/sources/geoJsonSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setAttributes","signatures":[{"documentation":{"contents":["<p>Sets the source attributes</p>\n"],"contentsRaw":"Sets the source attributes","metadata":{}},"fileName":"src/sources/geoJsonSource.ts","kind":"signature","name":"setAttributes","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"attributes","type":"SourceAttributes"}],"returnType":"this","type":"(attributes: SourceAttributes) => this"}]},{"fileName":"src/sources/geoJsonSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setData","signatures":[{"documentation":{"contents":["<p>Sets source data</p>\n"],"contentsRaw":"Sets source data","metadata":{}},"fileName":"src/sources/geoJsonSource.ts","kind":"signature","name":"setData","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"FeatureCollection | Feature"}],"returnType":"Promise<void>","type":"(data: FeatureCollection | Feature) => Promise<void>"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const source = new GeoJsonSource(map, {\n   data: {\n       type: &#39;FeatureCollection&#39;,\n       features: [\n           {\n               type: &#39;Feature&#39;,\n               properties: {},\n               geometry: {\n                   type: &#39;Point&#39;,\n                   coordinates: [82.92186, 55.03029],\n               },\n            },\n       ],\n   },\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst source = new GeoJsonSource(map, {\n   data: {\n       type: 'FeatureCollection',\n       features: [\n           {\n               type: 'Feature',\n               properties: {},\n               geometry: {\n                   type: 'Point',\n                   coordinates: [82.92186, 55.03029],\n               },\n            },\n       ],\n   },\n});\n```","metadata":{}},"fileName":"src/sources/geoJsonSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const source = new GeoJsonSource(map, {\n   data: {\n       type: &#39;FeatureCollection&#39;,\n       features: [\n           {\n               type: &#39;Feature&#39;,\n               properties: {},\n               geometry: {\n                   type: &#39;Point&#39;,\n                   coordinates: [82.92186, 55.03029],\n               },\n            },\n       ],\n   },\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst source = new GeoJsonSource(map, {\n   data: {\n       type: 'FeatureCollection',\n       features: [\n           {\n               type: 'Feature',\n               properties: {},\n               geometry: {\n                   type: 'Point',\n                   coordinates: [82.92186, 55.03029],\n               },\n            },\n       ],\n   },\n});\n```","metadata":{}},"fileName":"src/sources/geoJsonSource.ts","kind":"signature","name":"new GeoJsonSource","parameters":[{"documentation":{"contents":["<p>The map instance</p>\n"],"contentsRaw":"The map instance","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Spatial data source options</p>\n"],"contentsRaw":"Spatial data source options","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"GeoJsonSourceOptions"}],"returnType":"GeoJsonSource","type":"(map: Map, options: GeoJsonSourceOptions) => GeoJsonSource"}]}},"DefaultSource":{"documentation":{"contents":["<p>The default data source for the map. It&#39;s created automatically while the map initializing.</p>\n"],"contentsRaw":"The default data source for the map. It's created automatically while the map initializing.","metadata":{}},"fileName":"src/sources/defaultSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"DefaultSource","methods":[{"fileName":"src/sources/defaultSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setFeatureStateMap","signatures":[{"documentation":{"contents":["<p>Sets the feature state map to the source.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">source.setFeatureStateMap({\n  &quot;70030076195691401&quot;: { &quot;height&quot;: 300 },\n  &quot;70030076130722099&quot;: { &quot;height&quot;: 200 },\n});</code></pre>\n"],"contentsRaw":"Sets the feature state map to the source.\n\nExample:\n```js\nsource.setFeatureStateMap({\n  \"70030076195691401\": { \"height\": 300 },\n  \"70030076130722099\": { \"height\": 200 },\n});\n```","metadata":{}},"fileName":"src/sources/defaultSource.ts","kind":"signature","name":"setFeatureStateMap","parameters":[{"documentation":{"contents":["<p>Map of feature state by objects ids</p>\n"],"contentsRaw":"Map of feature state by objects ids","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"featureStateMap","type":"FeatureStateMap"}],"returnType":"void","type":"(featureStateMap: FeatureStateMap) => void"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":[],"contentsRaw":"","metadata":{}},"fileName":"src/sources/defaultSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":[],"contentsRaw":"","metadata":{}},"fileName":"src/sources/defaultSource.ts","kind":"signature","name":"new DefaultSource","parameters":[{"documentation":{"contents":["<p>The map instance</p>\n"],"contentsRaw":"The map instance","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"}],"returnType":"DefaultSource","type":"(map: Map) => DefaultSource"}]}},"Map":{"documentation":{"contents":["<p>The main class for map initialization.</p>\n"],"contentsRaw":"The main class for map initialization.","metadata":{}},"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"Map","extends":["Evented<MapEventTable>"],"methods":[{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"addIcon","signatures":[{"documentation":{"contents":["<p>Adds a config of user icon that will be used in the current style.\nIf an icon with the same name already exists, it won&#39;t be added and applied to the current style.</p>\n"],"contentsRaw":"Adds a config of user icon that will be used in the current style.\nIf an icon with the same name already exists, it won't be added and applied to the current style.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"addIcon","parameters":[{"documentation":{"contents":["<p>A user icon name.</p>\n"],"contentsRaw":"A user icon name.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"name","type":"string"},{"documentation":{"contents":["<p>A config with parameters for user icon.</p>\n"],"contentsRaw":"A config with parameters for user icon.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"config","type":"StyleIconConfig"}],"returnType":"this","type":"(name: string, config: StyleIconConfig) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"addLayer","signatures":[{"documentation":{"contents":["<p>Adds a style layer to the current map style.</p>\n"],"contentsRaw":"Adds a style layer to the current map style.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"addLayer","parameters":[{"documentation":{"contents":["<p>Style layer object.</p>\n"],"contentsRaw":"Style layer object.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"layer","type":"Layer"},{"documentation":{"contents":["<p>The identifier of an existing layer to insert the new layer before, resulting in the new layer appearing visually beneath the existing layer. If this argument is not specified, the layer will be appended to the end of the layers array and appear visually above all other layers.</p>\n<p>Throws an error if:</p>\n<ul>\n<li>the layer with specified id already exists in the current map style;</li>\n<li>the layer with specified beforeId doesn&#39;t exist in the current map style;</li>\n<li>one group layer is inserted into another group layer.</li>\n</ul>\n"],"contentsRaw":"The identifier of an existing layer to insert the new layer before, resulting in the new layer appearing visually beneath the existing layer. If this argument is not specified, the layer will be appended to the end of the layers array and appear visually above all other layers.\n\nThrows an error if:\n- the layer with specified id already exists in the current map style;\n- the layer with specified beforeId doesn't exist in the current map style;\n- one group layer is inserted into another group layer.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"beforeId","type":"undefined | string"}],"returnType":"this","type":"(layer: Layer, beforeId?: undefined | string) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the map and frees all related resources.</p>\n"],"contentsRaw":"Destroys the map and frees all related resources.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"emit","inheritedFrom":"Evented.emit","signatures":[{"documentation":{"contents":["<p>Calls all event listeners with event type <code>type</code></p>\n"],"contentsRaw":"Calls all event listeners with event type `type`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"emit","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Data transferred to events</p>\n"],"contentsRaw":"Data transferred to events","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"data","type":"MapEventTable[K]"}],"returnType":"this","type":"(type: K, data?: MapEventTable[K]) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"fitBounds","signatures":[{"documentation":{"contents":["<p>Pans and zooms the map to contain its visible area within the specified geographical bounds.\nThis method also resets the map pitch and rotation to 0.\nBut the map rotation can be saved by option considerRotation</p>\n"],"contentsRaw":"Pans and zooms the map to contain its visible area within the specified geographical bounds.\nThis method also resets the map pitch and rotation to 0.\nBut the map rotation can be saved by option considerRotation","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"fitBounds","parameters":[{"documentation":{"contents":["<p>The geographical bounds to fit in</p>\n"],"contentsRaw":"The geographical bounds to fit in","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"bounds","type":"LngLatBounds"},{"documentation":{"contents":["<p>FitBounds options</p>\n"],"contentsRaw":"FitBounds options","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"FitBoundsOptions"}],"returnType":"this","type":"(bounds: LngLatBounds, options?: FitBoundsOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getBounds","signatures":[{"documentation":{"contents":["<p>Returns the geographical bounds visible in the current map view.</p>\n"],"contentsRaw":"Returns the geographical bounds visible in the current map view.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getBounds","parameters":[],"returnType":"LngLatBoundsClass","type":"() => LngLatBoundsClass"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getCanvas","signatures":[{"documentation":{"contents":["<p>Returns HTMLCanvasElement of the map.</p>\n"],"contentsRaw":"Returns HTMLCanvasElement of the map.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getCanvas","parameters":[],"returnType":"HTMLCanvasElement","type":"() => HTMLCanvasElement"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getCenter","signatures":[{"documentation":{"contents":["<p>Returns the current map center in geographical coordinates (<code>[longitude, latitude]</code>).</p>\n"],"contentsRaw":"Returns the current map center in geographical coordinates (`[longitude, latitude]`).","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getCenter","parameters":[],"returnType":"number[]","type":"() => number[]"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getContainer","signatures":[{"documentation":{"contents":["<p>Returns HTML-container of the map.</p>\n"],"contentsRaw":"Returns HTML-container of the map.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getContainer","parameters":[],"returnType":"HTMLElement","type":"() => HTMLElement"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getControlsLayoutPadding","signatures":[{"documentation":{"contents":["<p>Gets current padding of controls layout.</p>\n"],"contentsRaw":"Gets current padding of controls layout.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getControlsLayoutPadding","parameters":[],"returnType":"Padding","type":"() => Padding"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getDefaultSource","signatures":[{"documentation":{"contents":["<p>Returns the map default source.</p>\n"],"contentsRaw":"Returns the map default source.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getDefaultSource","parameters":[],"returnType":"DefaultSource","type":"() => DefaultSource"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getLanguage","signatures":[{"documentation":{"contents":["<p>Returns the desired map language.</p>\n"],"contentsRaw":"Returns the desired map language.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getLanguage","parameters":[],"returnType":"string","type":"() => string"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getMaxZoom","signatures":[{"documentation":{"contents":["<p>Returns the current maximum map zoom.</p>\n"],"contentsRaw":"Returns the current maximum map zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getMaxZoom","parameters":[],"returnType":"number","type":"() => number"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getMinZoom","signatures":[{"documentation":{"contents":["<p>Returns the current minimum map zoom.</p>\n"],"contentsRaw":"Returns the current minimum map zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getMinZoom","parameters":[],"returnType":"number","type":"() => number"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getOption","signatures":[{"documentation":{"contents":["<p>Gets a value of the map option.</p>\n"],"contentsRaw":"Gets a value of the map option.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getOption","parameters":[{"documentation":{"contents":["<p>Map option name. Only &#39;disableDragging&#39;, &#39;enableTrackResize&#39; options are available</p>\n"],"contentsRaw":"Map option name. Only 'disableDragging', 'enableTrackResize' options are available","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"option","type":"SupportedSimpleOpts"}],"returnType":"undefined | false | true","type":"(option: SupportedSimpleOpts) => undefined | false | true"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getPadding","signatures":[{"documentation":{"contents":["<p>Returns the current map padding.</p>\n"],"contentsRaw":"Returns the current map padding.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getPadding","parameters":[],"returnType":"Padding","type":"() => Padding"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getPitch","signatures":[{"documentation":{"contents":["<p>Returns the current map pitch in degrees.</p>\n"],"contentsRaw":"Returns the current map pitch in degrees.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getPitch","parameters":[],"returnType":"number","type":"() => number"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getProjectionMatrix","signatures":[{"documentation":{"contents":["<p>Returns the view projection matrix associated with the current state of the map.</p>\n"],"contentsRaw":"Returns the view projection matrix associated with the current state of the map.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getProjectionMatrix","parameters":[],"returnType":"number[]","type":"() => number[]"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getRotation","signatures":[{"documentation":{"contents":["<p>Returns the current map rotation in degrees.</p>\n"],"contentsRaw":"Returns the current map rotation in degrees.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getRotation","parameters":[],"returnType":"number","type":"() => number"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getSize","signatures":[{"documentation":{"contents":["<p>Returns the current map size in logical pixels.</p>\n"],"contentsRaw":"Returns the current map size in logical pixels.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getSize","parameters":[],"returnType":"number[]","type":"() => number[]"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getStyleState","signatures":[{"documentation":{"contents":["<p>Returns the current map style variables.</p>\n<p>Available global variables:\n_activeFloorBuildingIds — an array of building IDs with active floor plans\n_activeFloorIds — an array of active floor IDs from buildings with active floor plans\ntrafficOn - a flag which tells if traffic is enabled\nparkingOn - a flag which tells if parking is enabled (used in native version of 2gis)\nnavigatorOn - a flag which tells if navigator is enabled (used in native version of 2gis)</p>\n"],"contentsRaw":"Returns the current map style variables.\n\nAvailable global variables:\n_activeFloorBuildingIds — an array of building IDs with active floor plans\n_activeFloorIds — an array of active floor IDs from buildings with active floor plans\ntrafficOn - a flag which tells if traffic is enabled\nparkingOn - a flag which tells if parking is enabled (used in native version of 2gis)\nnavigatorOn - a flag which tells if navigator is enabled (used in native version of 2gis)","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getStyleState","parameters":[],"returnType":"StyleState","type":"() => StyleState"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getStyleZoom","signatures":[{"documentation":{"contents":["<p>Returns the current map style zoom.</p>\n"],"contentsRaw":"Returns the current map style zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getStyleZoom","parameters":[],"returnType":"number","type":"() => number"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getWebGLContext","signatures":[{"documentation":{"contents":["<p>Returns WebGLRenderingContext of the map canvas.</p>\n"],"contentsRaw":"Returns WebGLRenderingContext of the map canvas.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getWebGLContext","parameters":[],"returnType":"GLContext","type":"() => GLContext"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getZoom","signatures":[{"documentation":{"contents":["<p>Returns the current map zoom.</p>\n"],"contentsRaw":"Returns the current map zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"getZoom","parameters":[],"returnType":"number","type":"() => number"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"hideTraffic","signatures":[{"documentation":{"contents":["<p>Hides the traffic layer from the map.</p>\n"],"contentsRaw":"Hides the traffic layer from the map.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"hideTraffic","parameters":[],"returnType":"this","type":"() => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"invalidateSize","signatures":[{"documentation":{"contents":["<p>Updates the map size. This method should be called after any change in the map container size.</p>\n"],"contentsRaw":"Updates the map size. This method should be called after any change in the map container size.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"invalidateSize","parameters":[],"returnType":"this","type":"() => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"isIdle","signatures":[{"documentation":{"contents":["<p>Returns true if the map isn&#39;t moving and has rendered all the viewport tiles.</p>\n"],"contentsRaw":"Returns true if the map isn't moving and has rendered all the viewport tiles.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"isIdle","parameters":[],"returnType":"boolean","type":"() => boolean"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"off","inheritedFrom":"Evented.off","signatures":[{"documentation":{"contents":["<p>Removes event listener registered with <code>on</code></p>\n"],"contentsRaw":"Removes event listener registered with `on`","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"off","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: MapEventTable[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: MapEventTable[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"on","inheritedFrom":"Evented.on","signatures":[{"documentation":{"contents":["<p>Registers event listener</p>\n"],"contentsRaw":"Registers event listener","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"on","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: MapEventTable[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: MapEventTable[K]) => void) => this"}]},{"fileName":"src/utils/evented.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"once","inheritedFrom":"Evented.once","signatures":[{"documentation":{"contents":["<p>Registers event listener which will be called once</p>\n"],"contentsRaw":"Registers event listener which will be called once","metadata":{}},"fileName":"src/utils/evented.ts","kind":"signature","name":"once","parameters":[{"documentation":{"contents":["<p>Event type</p>\n"],"contentsRaw":"Event type","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"type","type":"K"},{"documentation":{"contents":["<p>Event handler</p>\n"],"contentsRaw":"Event handler","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"listener","type":"(ev: MapEventTable[K]) => void"}],"returnType":"this","type":"(type: K, listener: (ev: MapEventTable[K]) => void) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"patchStyleState","signatures":[{"documentation":{"contents":["<p>Patches map style global variables. Use this method if you want to change a particular variable and left other ones intact.</p>\n"],"contentsRaw":"Patches map style global variables. Use this method if you want to change a particular variable and left other ones intact.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"patchStyleState","parameters":[{"documentation":{"contents":[],"contentsRaw":"","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"styleState","type":"StyleState"}],"returnType":"this","type":"(styleState: StyleState) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"project","signatures":[{"documentation":{"contents":["<p>Returns pixel coordinates <code>[x, y, z]</code>, relative to the map&#39;s container, that correspond to the specified geographical coordinates.\n<code>Z</code> coordinate is deprecated.</p>\n"],"contentsRaw":"Returns pixel coordinates `[x, y, z]`, relative to the map's container, that correspond to the specified geographical coordinates.\n`Z` coordinate is deprecated.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"project","parameters":[{"documentation":{"contents":["<p>The geographical coordinates <code>[longitude, latitude]</code> to project.</p>\n"],"contentsRaw":"The geographical coordinates `[longitude, latitude]` to project.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"lngLat","type":"number[]"}],"returnType":"number[]","type":"(lngLat: number[]) => number[]"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"removeIcon","signatures":[{"documentation":{"contents":["<p>Removes a specified icon from the current style.</p>\n"],"contentsRaw":"Removes a specified icon from the current style.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"removeIcon","parameters":[{"documentation":{"contents":["<p>An icon name to remove.</p>\n"],"contentsRaw":"An icon name to remove.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"name","type":"string"}],"returnType":"this","type":"(name: string) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"removeLayer","signatures":[{"documentation":{"contents":["<p>Removes the layer with the given identifier from the current map style.</p>\n"],"contentsRaw":"Removes the layer with the given identifier from the current map style.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"removeLayer","parameters":[{"documentation":{"contents":["<p>The identifier of the layer to remove.</p>\n<p>Throws an error if layer with specified id does not exist in the current map style.</p>\n"],"contentsRaw":"The identifier of the layer to remove.\n\nThrows an error if layer with specified id does not exist in the current map style.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"layerId","type":"string"}],"returnType":"this","type":"(layerId: string) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setCenter","signatures":[{"documentation":{"contents":["<p>Sets the geographical center of the map.</p>\n"],"contentsRaw":"Sets the geographical center of the map.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setCenter","parameters":[{"documentation":{"contents":["<p>The desired coordinates (<code>[longitude, latitude]</code>).</p>\n"],"contentsRaw":"The desired coordinates (`[longitude, latitude]`).","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"center","type":"number[]"},{"documentation":{"contents":["<p>Center animation options.</p>\n"],"contentsRaw":"Center animation options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(center: number[], options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setControlsLayoutPadding","signatures":[{"documentation":{"contents":["<p>Sets padding for controls layout.</p>\n"],"contentsRaw":"Sets padding for controls layout.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setControlsLayoutPadding","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"padding","type":"Partial<Padding>"}],"returnType":"void","type":"(padding: Partial<Padding>) => void"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setFloorPlanLevel","signatures":[{"documentation":{"contents":["<p>Sets a floorLevel of the floorPlan.</p>\n"],"contentsRaw":"Sets a floorLevel of the floorPlan.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setFloorPlanLevel","parameters":[{"documentation":{"contents":["<p>id of the floor plan</p>\n"],"contentsRaw":"id of the floor plan","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"floorPlanId","type":"string"},{"documentation":{"contents":["<p>floorLevelIndex in floorLevels list</p>\n"],"contentsRaw":"floorLevelIndex in floorLevels list","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"floorLevelIndex","type":"number"}],"returnType":"void","type":"(floorPlanId: string, floorLevelIndex: number) => void"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setLanguage","signatures":[{"documentation":{"contents":["<p>Sets the desired map language.</p>\n"],"contentsRaw":"Sets the desired map language.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setLanguage","parameters":[{"documentation":{"contents":["<p>short string code &#39;en&#39;, &#39;ru&#39;, ...etc</p>\n"],"contentsRaw":"short string code 'en', 'ru', ...etc","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"lang","type":"string"}],"returnType":"this","type":"(lang: string) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setMaxBounds","signatures":[{"documentation":{"contents":["<p>Sets a bound to limit movings on map</p>\n"],"contentsRaw":"Sets a bound to limit movings on map","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setMaxBounds","parameters":[{"documentation":{"contents":["<p>2 lon-lat points to limit square</p>\n"],"contentsRaw":"2 lon-lat points to limit square","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"bounds","type":"LngLatBounds"}],"returnType":"this","type":"(bounds: LngLatBounds) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setMaxPitch","signatures":[{"documentation":{"contents":["<p>Sets the maximum map pitch.</p>\n"],"contentsRaw":"Sets the maximum map pitch.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setMaxPitch","parameters":[{"documentation":{"contents":["<p>The desired maximum pitch in degrees.</p>\n"],"contentsRaw":"The desired maximum pitch in degrees.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"pitch","type":"number"},{"documentation":{"contents":["<p>Options for animating the pitch in case the current pitch is more than the new maximum.</p>\n"],"contentsRaw":"Options for animating the pitch in case the current pitch is more than the new maximum.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(pitch: number, options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setMaxZoom","signatures":[{"documentation":{"contents":["<p>Sets the maximum map zoom.</p>\n"],"contentsRaw":"Sets the maximum map zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setMaxZoom","parameters":[{"documentation":{"contents":["<p>The desired maximum zoom.</p>\n"],"contentsRaw":"The desired maximum zoom.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"zoom","type":"number"},{"documentation":{"contents":["<p>Options for adjusting map zoom in case the current zoom is more than the new maximum.</p>\n"],"contentsRaw":"Options for adjusting map zoom in case the current zoom is more than the new maximum.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(zoom: number, options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setMinPitch","signatures":[{"documentation":{"contents":["<p>Sets the minimum map pitch.</p>\n"],"contentsRaw":"Sets the minimum map pitch.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setMinPitch","parameters":[{"documentation":{"contents":["<p>The desired minimum pitch in degrees.</p>\n"],"contentsRaw":"The desired minimum pitch in degrees.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"pitch","type":"number"},{"documentation":{"contents":["<p>Options for animating the pitch in case the current pitch is less than the new minimum.</p>\n"],"contentsRaw":"Options for animating the pitch in case the current pitch is less than the new minimum.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(pitch: number, options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setMinZoom","signatures":[{"documentation":{"contents":["<p>Sets the minimum map zoom.</p>\n"],"contentsRaw":"Sets the minimum map zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setMinZoom","parameters":[{"documentation":{"contents":["<p>The desired minimum zoom.</p>\n"],"contentsRaw":"The desired minimum zoom.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"zoom","type":"number"},{"documentation":{"contents":["<p>Options for adjusting map zoom in case the current zoom is less than the new minimum.</p>\n"],"contentsRaw":"Options for adjusting map zoom in case the current zoom is less than the new minimum.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(zoom: number, options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setOption","signatures":[{"documentation":{"contents":["<p>Sets a new value for the map option.</p>\n"],"contentsRaw":"Sets a new value for the map option.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setOption","parameters":[{"documentation":{"contents":["<p>Map option name. Only &#39;disableDragging&#39;, &#39;enableTrackResize&#39; options are available</p>\n"],"contentsRaw":"Map option name. Only 'disableDragging', 'enableTrackResize' options are available","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"option","type":"SupportedSimpleOpts"},{"documentation":{"contents":["<p>New value of the map option.</p>\n"],"contentsRaw":"New value of the map option.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"value","type":"any"}],"returnType":"this","type":"(option: SupportedSimpleOpts, value: any) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setPadding","signatures":[{"documentation":{"contents":["<p>Sets the map padding.\nThe padding on each side has a clamp to a positive value no larger than the map canvas size for either side</p>\n"],"contentsRaw":"Sets the map padding.\nThe padding on each side has a clamp to a positive value no larger than the map canvas size for either side","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setPadding","parameters":[{"documentation":{"contents":["<p>Padding in pixels from the different sides of the map canvas</p>\n"],"contentsRaw":"Padding in pixels from the different sides of the map canvas","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"padding","type":"Partial<Padding>"},{"documentation":{"contents":["<p>Padding animation options.</p>\n"],"contentsRaw":"Padding animation options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(padding: Partial<Padding>, options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setPitch","signatures":[{"documentation":{"contents":["<p>Sets the map pitch angle.</p>\n"],"contentsRaw":"Sets the map pitch angle.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setPitch","parameters":[{"documentation":{"contents":["<p>The desired map pitch in degrees.</p>\n"],"contentsRaw":"The desired map pitch in degrees.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"pitch","type":"number"},{"documentation":{"contents":["<p>Pitch animation options.</p>\n"],"contentsRaw":"Pitch animation options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(pitch: number, options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setRotation","signatures":[{"documentation":{"contents":["<p>Sets the map rotation angle.</p>\n"],"contentsRaw":"Sets the map rotation angle.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setRotation","parameters":[{"documentation":{"contents":["<p>The desired map rotation in degrees.</p>\n"],"contentsRaw":"The desired map rotation in degrees.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"rotation","type":"number"},{"documentation":{"contents":["<p>Rotation animation options.</p>\n"],"contentsRaw":"Rotation animation options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"RotationAnimationOptions"}],"returnType":"this","type":"(rotation: number, options?: RotationAnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setSelectedObjects","signatures":[{"documentation":{"contents":["<p>Selects objects on the map by identifiers.</p>\n"],"contentsRaw":"Selects objects on the map by identifiers.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setSelectedObjects","parameters":[{"documentation":{"contents":["<p>An array of identifiers of objects that should be selected.</p>\n"],"contentsRaw":"An array of identifiers of objects that should be selected.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"ids","defaultValue":"[]","type":"string[]"}],"returnType":"this","type":"(ids?: string[]) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setStyleById","signatures":[{"documentation":{"contents":["<p>Uploads styles object by its id and apply it to the map.\nReturns a promise that contains param styleId.</p>\n"],"contentsRaw":"Uploads styles object by its id and apply it to the map.\nReturns a promise that contains param styleId.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setStyleById","parameters":[{"documentation":{"contents":["<p>uuid of the style.</p>\n"],"contentsRaw":"uuid of the style.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"styleId","type":"string"}],"returnType":"Promise<string>","type":"(styleId: string) => Promise<string>"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setStyleState","signatures":[{"documentation":{"contents":["<p>Sets whole map style global variables at once, any previously set variables will be reset or overridden.</p>\n"],"contentsRaw":"Sets whole map style global variables at once, any previously set variables will be reset or overridden.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setStyleState","parameters":[{"documentation":{"contents":[],"contentsRaw":"","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"styleState","type":"StyleState"}],"returnType":"this","type":"(styleState: StyleState) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setStyleZoom","signatures":[{"documentation":{"contents":["<p>Sets the map style zoom.</p>\n"],"contentsRaw":"Sets the map style zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setStyleZoom","parameters":[{"documentation":{"contents":["<p>The desired style zoom.</p>\n"],"contentsRaw":"The desired style zoom.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"styleZoom","type":"number"},{"documentation":{"contents":["<p>Zoom animation options.</p>\n"],"contentsRaw":"Zoom animation options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"AnimationOptions"}],"returnType":"this","type":"(styleZoom: number, options?: AnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setZoom","signatures":[{"documentation":{"contents":["<p>Sets the map zoom.</p>\n"],"contentsRaw":"Sets the map zoom.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"setZoom","parameters":[{"documentation":{"contents":["<p>The desired zoom.</p>\n"],"contentsRaw":"The desired zoom.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"zoom","type":"number"},{"documentation":{"contents":["<p>Zoom animation options.</p>\n"],"contentsRaw":"Zoom animation options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"ZoomAnimationOptions"}],"returnType":"this","type":"(zoom: number, options?: ZoomAnimationOptions) => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"showTraffic","signatures":[{"documentation":{"contents":["<p>Shows the traffic layer on the map.</p>\n"],"contentsRaw":"Shows the traffic layer on the map.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"showTraffic","parameters":[],"returnType":"this","type":"() => this"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"triggerRerender","signatures":[{"documentation":{"contents":["<p>Calls the map rerender.</p>\n"],"contentsRaw":"Calls the map rerender.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"triggerRerender","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"unproject","signatures":[{"documentation":{"contents":["<p>Returns geographical coordinates <code>[longitude, latitude]</code> that correspond to the specified pixel coordinates.</p>\n"],"contentsRaw":"Returns geographical coordinates `[longitude, latitude]` that correspond to the specified pixel coordinates.","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"unproject","parameters":[{"documentation":{"contents":["<p>The pixel coordinates <code>[x, y]</code> of the map&#39;s container to unproject.</p>\n"],"contentsRaw":"The pixel coordinates `[x, y]` of the map's container to unproject.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"point","type":"number[]"}],"returnType":"number[]","type":"(point: number[]) => number[]"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const map = new mapgl.Map(&#39;map&#39;, {\n  center: [55.185346, 25.14226],\n  zoom: 16,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst map = new mapgl.Map('map', {\n  center: [55.185346, 25.14226],\n  zoom: 16,\n});\n```","metadata":{}},"fileName":"src/map.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const map = new mapgl.Map(&#39;map&#39;, {\n  center: [55.185346, 25.14226],\n  zoom: 16,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst map = new mapgl.Map('map', {\n  center: [55.185346, 25.14226],\n  zoom: 16,\n});\n```","metadata":{}},"fileName":"src/map.ts","kind":"signature","name":"new Map","parameters":[{"documentation":{"contents":["<p>The HTML element in which the map appears, or its ID.</p>\n"],"contentsRaw":"The HTML element in which the map appears, or its ID.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"container","type":"HTMLElement | string"},{"documentation":{"contents":["<p>Map initialization options.</p>\n"],"contentsRaw":"Map initialization options.","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"MapOptions"}],"returnType":"Map","type":"(container: HTMLElement | string, options: MapOptions) => Map"}]}},"RasterTileSource":{"documentation":{"contents":["<p>Class for creating raster tile source on the map</p>\n"],"contentsRaw":"Class for creating raster tile source on the map","metadata":{}},"fileName":"src/sources/rasterTileSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"class","name":"RasterTileSource","methods":[{"fileName":"src/sources/rasterTileSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"destroy","signatures":[{"documentation":{"contents":["<p>Destroys the source</p>\n"],"contentsRaw":"Destroys the source","metadata":{}},"fileName":"src/sources/rasterTileSource.ts","kind":"signature","name":"destroy","parameters":[],"returnType":"void","type":"() => void"}]},{"fileName":"src/sources/rasterTileSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"getAttributes","signatures":[{"documentation":{"contents":["<p>Get the source attributes</p>\n"],"contentsRaw":"Get the source attributes","metadata":{}},"fileName":"src/sources/rasterTileSource.ts","kind":"signature","name":"getAttributes","parameters":[],"returnType":"SourceAttributes","type":"() => SourceAttributes"}]},{"fileName":"src/sources/rasterTileSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":true,"isRest":false,"isStatic":false},"kind":"method","name":"setAttributes","signatures":[{"documentation":{"contents":["<p>Set the source attributes</p>\n"],"contentsRaw":"Set the source attributes","metadata":{}},"fileName":"src/sources/rasterTileSource.ts","kind":"signature","name":"setAttributes","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"attributes","type":"SourceAttributes"}],"returnType":"this","type":"(attributes: SourceAttributes) => this"}]}],"properties":[],"accessors":[],"constructorType":{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const source = new RasterTileSource(map, {\n     url: (x, y, zoom) =&gt; `https://tile.openstreetmap.org/${zoom}/${x}/${y}.png`,\n     attributes: { foo: &#39;asd&#39; },\n     attribution: &#39;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst source = new RasterTileSource(map, {\n     url: (x, y, zoom) => `https://tile.openstreetmap.org/${zoom}/${x}/${y}.png`,\n     attributes: { foo: 'asd' },\n     attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n});\n```","metadata":{}},"fileName":"src/sources/rasterTileSource.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"constructor","name":"constructor","signatures":[{"documentation":{"contents":["<p>Example:</p>\n<pre><code class=\"language-js\">const source = new RasterTileSource(map, {\n     url: (x, y, zoom) =&gt; `https://tile.openstreetmap.org/${zoom}/${x}/${y}.png`,\n     attributes: { foo: &#39;asd&#39; },\n     attribution: &#39;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;,\n});</code></pre>\n"],"contentsRaw":"Example:\n```js\nconst source = new RasterTileSource(map, {\n     url: (x, y, zoom) => `https://tile.openstreetmap.org/${zoom}/${x}/${y}.png`,\n     attributes: { foo: 'asd' },\n     attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n});\n```","metadata":{}},"fileName":"src/sources/rasterTileSource.ts","kind":"signature","name":"new RasterTileSource","parameters":[{"documentation":{"contents":["<p>The map instance</p>\n"],"contentsRaw":"The map instance","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"map","type":"Map"},{"documentation":{"contents":["<p>Spatial data source options</p>\n"],"contentsRaw":"Spatial data source options","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"RasterTileSourceOptions"}],"returnType":"RasterTileSource","type":"(map: Map, options: RasterTileSourceOptions) => RasterTileSource"}]}},"isSupported":{"fileName":"src/isSuported.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"method","name":"isSupported","signatures":[{"documentation":{"contents":["<p>Tests whether the current browser supports MapGL. Use our\nraster map implementation <a href=\"https://api.2gis.ru/doc/maps/en/quickstart/\">https://api.2gis.ru/doc/maps/en/quickstart/</a>\nif not.</p>\n"],"contentsRaw":"Tests whether the current browser supports MapGL. Use our\nraster map implementation https://api.2gis.ru/doc/maps/en/quickstart/\nif not.","metadata":{}},"fileName":"src/isSuported.ts","kind":"signature","name":"isSupported","parameters":[{"documentation":{"contents":["<p>MapSupportOptions</p>\n"],"contentsRaw":"MapSupportOptions","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"MapSupportOptions"}],"returnType":"boolean","type":"(options?: MapSupportOptions) => boolean"}]},"notSupportedReason":{"fileName":"src/isSuported.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"method","name":"notSupportedReason","signatures":[{"documentation":{"contents":["<p>Tests whether the current browser supports MapGL and returns the reason in a string</p>\n"],"contentsRaw":"Tests whether the current browser supports MapGL and returns the reason in a string","metadata":{}},"fileName":"src/isSuported.ts","kind":"signature","name":"notSupportedReason","parameters":[{"documentation":{"contents":["<p>MapSupportOptions</p>\n"],"contentsRaw":"MapSupportOptions","metadata":{}},"flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"options","type":"MapSupportOptions"}],"returnType":"undefined | string","type":"(options?: MapSupportOptions) => undefined | string"}]},"LngLatBounds":{"documentation":{"contents":["<p>Geographical bounds.</p>\n"],"contentsRaw":"Geographical bounds.","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"LngLatBounds","methods":[],"properties":[{"documentation":{"contents":["<p>The north-east point of the bounds <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"The north-east point of the bounds `[longitude, latitude]`.","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"northEast","type":"number[]"},{"documentation":{"contents":["<p>The south-west point of the bounds <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"The south-west point of the bounds `[longitude, latitude]`.","metadata":{}},"fileName":"src/objects/lngLatBounds.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"southWest","type":"number[]"}]},"AnimationOptions":{"documentation":{"contents":["<p>Common options for map animations. Used by methods such as setCenter, setZoom, etc.</p>\n"],"contentsRaw":"Common options for map animations. Used by methods such as setCenter, setZoom, etc.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"AnimationOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Determines if the transform should be animated.</p>\n"],"contentsRaw":"Determines if the transform should be animated.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"animate","type":"undefined | false | true"},{"documentation":{"contents":["<p>Duration of the animation in milliseconds.</p>\n"],"contentsRaw":"Duration of the animation in milliseconds.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"duration","type":"undefined | number"},{"documentation":{"contents":["<p>Easing function to be used with the animation.</p>\n"],"contentsRaw":"Easing function to be used with the animation.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"easing","type":"Easing"}]},"ZoomAnimationOptions":{"documentation":{"contents":["<p>Animation options for zoom.</p>\n"],"contentsRaw":"Animation options for zoom.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"ZoomAnimationOptions","extends":["AnimationOptions"],"methods":[],"properties":[{"documentation":{"contents":["<p>Determines if the transform should be animated.</p>\n"],"contentsRaw":"Determines if the transform should be animated.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"animate","inheritedFrom":"AnimationOptions.animate","type":"undefined | false | true"},{"documentation":{"contents":["<p>Duration of the animation in milliseconds.</p>\n"],"contentsRaw":"Duration of the animation in milliseconds.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"duration","inheritedFrom":"AnimationOptions.duration","type":"undefined | number"},{"documentation":{"contents":["<p>Easing function to be used with the animation.</p>\n"],"contentsRaw":"Easing function to be used with the animation.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"easing","inheritedFrom":"AnimationOptions.easing","type":"Easing"},{"documentation":{"contents":["<p>Intermediate zoom values will be calculated using camera&#39;s height.</p>\n<ul>\n<li>false (default): zoom values will be calculated using provided easing function.</li>\n<li>true: intermediate camera height calculated then converted into zoom.</li>\n</ul>\n<p>Initial and final zoom values are same for both modes, only timing function changes.</p>\n<p>true value is useful for simultaneous animation of map&#39;s center and zoom.\nIn that case camera will fly in a straight line.</p>\n<p>Example:\nmap.setCenter([82.920412, 55.030111], {easing: &#39;easeOutCubic&#39;, duration: 800});\nmap.setZoom(18, {easing: &#39;easeOutCubic&#39;, useHeightForAnimation: true, duration: 800});</p>\n"],"contentsRaw":"Intermediate zoom values will be calculated using camera's height.\n\n- false (default): zoom values will be calculated using provided easing function.\n- true: intermediate camera height calculated then converted into zoom.\n\nInitial and final zoom values are same for both modes, only timing function changes.\n\ntrue value is useful for simultaneous animation of map's center and zoom.\nIn that case camera will fly in a straight line.\n\nExample:\nmap.setCenter([82.920412, 55.030111], {easing: 'easeOutCubic', duration: 800});\nmap.setZoom(18, {easing: 'easeOutCubic', useHeightForAnimation: true, duration: 800});","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"useHeightForAnimation","type":"undefined | false | true"}]},"RotationAnimationOptions":{"documentation":{"contents":["<p>Options for map rotation animations.</p>\n"],"contentsRaw":"Options for map rotation animations.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"RotationAnimationOptions","extends":["AnimationOptions"],"methods":[],"properties":[{"documentation":{"contents":["<p>Determines if the transform should be animated.</p>\n"],"contentsRaw":"Determines if the transform should be animated.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"animate","inheritedFrom":"AnimationOptions.animate","type":"undefined | false | true"},{"documentation":{"contents":["<p>Duration of the animation in milliseconds.</p>\n"],"contentsRaw":"Duration of the animation in milliseconds.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"duration","inheritedFrom":"AnimationOptions.duration","type":"undefined | number"},{"documentation":{"contents":["<p>Easing function to be used with the animation.</p>\n"],"contentsRaw":"Easing function to be used with the animation.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"easing","inheritedFrom":"AnimationOptions.easing","type":"Easing"},{"documentation":{"contents":["<p>If enabled, the desired rotation will be normalized to (–180°; 180°], and\nthe direction of the rotation will be chosen so that the map makes less\nthan half a turn. <code>normalize: false</code> is useful for animating one of more\nfull turns of the map. Enabled by default.</p>\n"],"contentsRaw":"If enabled, the desired rotation will be normalized to (–180°; 180°], and\nthe direction of the rotation will be chosen so that the map makes less\nthan half a turn. `normalize: false` is useful for animating one of more\nfull turns of the map. Enabled by default.","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"normalize","type":"undefined | false | true"}]},"StyleOptions":{"documentation":{"contents":["<p>Style options - paths to icons and fonts.</p>\n"],"contentsRaw":"Style options - paths to icons and fonts.","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"StyleOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The url to the fonts.</p>\n"],"contentsRaw":"The url to the fonts.","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"fontsPath","type":"string"},{"documentation":{"contents":["<p>The url to the icons.</p>\n"],"contentsRaw":"The url to the icons.","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"iconsPath","type":"string"},{"documentation":{"contents":["<p>The url to the models.</p>\n"],"contentsRaw":"The url to the models.","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"modelsPath","type":"string"},{"documentation":{"contents":["<p>The url to the styles.</p>\n"],"contentsRaw":"The url to the styles.","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"stylePath","type":"undefined | string"}]},"StyleIconConfig":{"documentation":{"contents":["<p>Config of an original user icon.</p>\n"],"contentsRaw":"Config of an original user icon.","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"StyleIconConfig","methods":[],"properties":[{"documentation":{"contents":["<p>URL to an icon. It can be:</p>\n<ul>\n<li>absolute: //external.domain/some_path/some_icon.svg</li>\n<li>as a template: //{appHost}/some_path/some_icon.svg</li>\n</ul>\n"],"contentsRaw":"URL to an icon. It can be:\n - absolute: //external.domain/some_path/some_icon.svg\n - as a template: //{appHost}/some_path/some_icon.svg","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"url","type":"string"}]},"MapEventTable":{"documentation":{"contents":["<p>The list of events that can be emitted by the map.</p>\n"],"contentsRaw":"The list of events that can be emitted by the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MapEventTable","methods":[],"properties":[{"documentation":{"contents":["<p>Emitted repeatedly during any change in the map&#39;s center.</p>\n"],"contentsRaw":"Emitted repeatedly during any change in the map's center.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"center","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after any change in the map&#39;s center.</p>\n"],"contentsRaw":"Emitted after any change in the map's center.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"centerend","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted before any change in the map&#39;s center.</p>\n"],"contentsRaw":"Emitted before any change in the map's center.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"centerstart","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after the map language is changed.</p>\n"],"contentsRaw":"Emitted after the map language is changed.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"changeLanguage","type":"ChangeLanguageEvent"},{"documentation":{"contents":["<p>Emitted when the map is clicked.</p>\n"],"contentsRaw":"Emitted when the map is clicked.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"click","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted when the map is clicked by right button.</p>\n"],"contentsRaw":"Emitted when the map is clicked by right button.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"contextmenu","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted after the map is destroyed.</p>\n"],"contentsRaw":"Emitted after the map is destroyed.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"destroy","type":"DestroyMapEvent"},{"documentation":{"contents":["<p>Emitted after the floor plan level is changed.</p>\n"],"contentsRaw":"Emitted after the floor plan level is changed.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorlevelchange","type":"FloorLevelChangeEvent"},{"documentation":{"contents":["<p>Emitted after the floor plan is disappeared from the map.</p>\n"],"contentsRaw":"Emitted after the floor plan is disappeared from the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorplanhide","type":"FloorPlanHideEvent"},{"documentation":{"contents":["<p>Emitted after the floor plan is shown on the map.</p>\n"],"contentsRaw":"Emitted after the floor plan is shown on the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorplanshow","type":"FloorPlanShowEvent"},{"documentation":{"contents":["<p>Emitted when the map becomes idle after some interaction (drag, zoom etc).\nIdle means that the map is not interacting, all tiles are drawn and labeling is finished.\nThis event doesn&#39;t take into account any asset loading (for example, marker icons).</p>\n"],"contentsRaw":"Emitted when the map becomes idle after some interaction (drag, zoom etc).\nIdle means that the map is not interacting, all tiles are drawn and labeling is finished.\nThis event doesn't take into account any asset loading (for example, marker icons).","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"idle","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted when the user presses a mouse button over the map.</p>\n"],"contentsRaw":"Emitted when the user presses a mouse button over the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mousedown","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user moves the pointer over the map.</p>\n"],"contentsRaw":"Emitted when the user moves the pointer over the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mousemove","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user moves the mouse away from the map item.</p>\n"],"contentsRaw":"Emitted when the user moves the mouse away from the map item.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseout","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user hovers over a map item.</p>\n"],"contentsRaw":"Emitted when the user hovers over a map item.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseover","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user releases the mouse button over the map.</p>\n"],"contentsRaw":"Emitted when the user releases the mouse button over the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseup","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted repeatedly during any movement of the map.</p>\n"],"contentsRaw":"Emitted repeatedly during any movement of the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"move","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after any movement of the map.</p>\n"],"contentsRaw":"Emitted after any movement of the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"moveend","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted before any movement of the map.</p>\n"],"contentsRaw":"Emitted before any movement of the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"movestart","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted repeatedly during any change in the map&#39;s pitch.</p>\n"],"contentsRaw":"Emitted repeatedly during any change in the map's pitch.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"pitch","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after any change in the map&#39;s pitch.</p>\n"],"contentsRaw":"Emitted after any change in the map's pitch.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"pitchend","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted before any change in the map&#39;s pitch.</p>\n"],"contentsRaw":"Emitted before any change in the map's pitch.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"pitchstart","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after any change in the map&#39;s size.</p>\n"],"contentsRaw":"Emitted after any change in the map's size.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"resize","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted repeatedly during any change in the map&#39;s pitch.</p>\n"],"contentsRaw":"Emitted repeatedly during any change in the map's pitch.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"rotation","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after any change in the map&#39;s pitch.</p>\n"],"contentsRaw":"Emitted after any change in the map's pitch.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"rotationend","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted before any change in the map&#39;s pitch.</p>\n"],"contentsRaw":"Emitted before any change in the map's pitch.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"rotationstart","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after the map style is loaded.</p>\n"],"contentsRaw":"Emitted after the map style is loaded.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"styleload","type":"StyleLoadEvent"},{"documentation":{"contents":["<p>Emitted when the user lifts the finger off the map.</p>\n"],"contentsRaw":"Emitted when the user lifts the finger off the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"touchend","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted when the user taps on the map.</p>\n"],"contentsRaw":"Emitted when the user taps on the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"touchstart","type":"MapPointerEvent"},{"documentation":{"contents":["<p>Emitted after the traffic layer hid from the map.</p>\n"],"contentsRaw":"Emitted after the traffic layer hid from the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"traffichide","type":"TrafficVisibilityEvent"},{"documentation":{"contents":["<p>Emitted after update current traffic score.</p>\n"],"contentsRaw":"Emitted after update current traffic score.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"trafficscore","type":"TrafficScoreEvent"},{"documentation":{"contents":["<p>Emitted before the traffic layer showed on the map.</p>\n"],"contentsRaw":"Emitted before the traffic layer showed on the map.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"trafficshow","type":"TrafficVisibilityEvent"},{"documentation":{"contents":["<p>Emitted repeatedly during any change in zoom level.</p>\n"],"contentsRaw":"Emitted repeatedly during any change in zoom level.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zoom","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted after any change in zoom level.</p>\n"],"contentsRaw":"Emitted after any change in zoom level.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zoomend","type":"MapEvent"},{"documentation":{"contents":["<p>Emitted before any change in zoom level.</p>\n"],"contentsRaw":"Emitted before any change in zoom level.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zoomstart","type":"MapEvent"}]},"DynamicObjectEventTable":{"documentation":{"contents":["<p>The list of events that can be emitted by markers.</p>\n"],"contentsRaw":"The list of events that can be emitted by markers.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"DynamicObjectEventTable","methods":[],"properties":[{"documentation":{"contents":["<p>Emitted when the marker is clicked.</p>\n"],"contentsRaw":"Emitted when the marker is clicked.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"click","type":"DynamicObjectPointerEvent<T>"},{"documentation":{"contents":["<p>Emitted when the user presses a mouse button over the marker.</p>\n"],"contentsRaw":"Emitted when the user presses a mouse button over the marker.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mousedown","type":"DynamicObjectPointerEvent<T>"},{"documentation":{"contents":["<p>Emitted when the user moves the pointer over the marker.</p>\n"],"contentsRaw":"Emitted when the user moves the pointer over the marker.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mousemove","type":"DynamicObjectPointerEvent<T>"},{"documentation":{"contents":["<p>Emitted when the user moves the mouse away from the marker.</p>\n"],"contentsRaw":"Emitted when the user moves the mouse away from the marker.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseout","type":"DynamicObjectPointerEvent<T>"},{"documentation":{"contents":["<p>Emitted when the user hovers over the marker.</p>\n"],"contentsRaw":"Emitted when the user hovers over the marker.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseover","type":"DynamicObjectPointerEvent<T>"},{"documentation":{"contents":["<p>Emitted when the user releases the mouse button over the marker.</p>\n"],"contentsRaw":"Emitted when the user releases the mouse button over the marker.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"mouseup","type":"DynamicObjectPointerEvent<T>"},{"documentation":{"contents":["<p>Emitted when the user lifts the finger off the marker.</p>\n"],"contentsRaw":"Emitted when the user lifts the finger off the marker.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"touchend","type":"DynamicObjectPointerEvent<T>"},{"documentation":{"contents":["<p>Emitted when the user taps on the marker.</p>\n"],"contentsRaw":"Emitted when the user taps on the marker.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"touchstart","type":"DynamicObjectPointerEvent<T>"}]},"MapEvent":{"documentation":{"contents":["<p>The general event type for map events.</p>\n"],"contentsRaw":"The general event type for map events.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MapEvent","methods":[],"properties":[{"documentation":{"contents":["<p>True if event was emitted by user&#39;s interaction.</p>\n"],"contentsRaw":"True if event was emitted by user's interaction.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"isUser","type":"boolean"}]},"PointerEvent":{"documentation":{"contents":["<p>The basic event type for pointer-related events.</p>\n"],"contentsRaw":"The basic event type for pointer-related events.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"PointerEvent","methods":[],"properties":[{"documentation":{"contents":["<p>Geographical coordinates of the event.</p>\n"],"contentsRaw":"Geographical coordinates of the event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lngLat","type":"number[]"},{"documentation":{"contents":["<p>The original DOM event.</p>\n"],"contentsRaw":"The original DOM event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"originalEvent","type":"MouseEvent | TouchEvent"},{"documentation":{"contents":["<p>Screen coordinates of the event.</p>\n"],"contentsRaw":"Screen coordinates of the event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"point","type":"number[]"}]},"MapPointerEvent":{"documentation":{"contents":["<p>The event type for pointer-related map events.</p>\n"],"contentsRaw":"The event type for pointer-related map events.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MapPointerEvent","extends":["PointerEvent"],"methods":[],"properties":[{"documentation":{"contents":["<p>Geographical coordinates of the event.</p>\n"],"contentsRaw":"Geographical coordinates of the event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lngLat","inheritedFrom":"PointerEvent.lngLat","type":"number[]"},{"documentation":{"contents":["<p>The original DOM event.</p>\n"],"contentsRaw":"The original DOM event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"originalEvent","inheritedFrom":"PointerEvent.originalEvent","type":"MouseEvent | TouchEvent"},{"documentation":{"contents":["<p>Screen coordinates of the event.</p>\n"],"contentsRaw":"Screen coordinates of the event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"point","inheritedFrom":"PointerEvent.point","type":"number[]"},{"documentation":{"contents":["<p>Target (geographical object) of the event.</p>\n"],"contentsRaw":"Target (geographical object) of the event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"target","type":"EventTarget"},{"documentation":{"contents":["<p>The source target data of a pointer event.</p>\n"],"contentsRaw":"The source target data of a pointer event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"targetData","type":"EventTargetData"}]},"EventTarget":{"documentation":{"contents":["<p>The target of a pointer event.</p>\n"],"contentsRaw":"The target of a pointer event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"EventTarget","methods":[],"properties":[{"documentation":{"contents":["<p>ID of the target object.</p>\n"],"contentsRaw":"ID of the target object.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"id","type":"string"}]},"GeoJsonEventTargetData":{"documentation":{"contents":["<p>The GeoJson target data of a pointer event.</p>\n"],"contentsRaw":"The GeoJson target data of a pointer event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"GeoJsonEventTargetData","methods":[],"properties":[{"documentation":{"contents":["<p>GeoJson feature.</p>\n"],"contentsRaw":"GeoJson feature.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"feature","type":"Feature"},{"documentation":{"contents":["<p>GeoJson source.</p>\n"],"contentsRaw":"GeoJson source.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"source","type":"GeoJsonSource"},{"documentation":{"contents":["<p>Type the geojson event data.</p>\n"],"contentsRaw":"Type the geojson event data.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"\"geojson\""}]},"DefaultEventTargetData":{"documentation":{"contents":["<p>The default targetData of a pointer event.</p>\n"],"contentsRaw":"The default targetData of a pointer event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"DefaultEventTargetData","methods":[],"properties":[{"documentation":{"contents":["<p>ID of the particular floor.\nIt&#39;s specified when the target object is a part of a floor plan object (e.g. the room in a building).</p>\n"],"contentsRaw":"ID of the particular floor.\nIt's specified when the target object is a part of a floor plan object (e.g. the room in a building).","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorId","type":"undefined | string"},{"documentation":{"contents":["<p>ID of the target object.</p>\n"],"contentsRaw":"ID of the target object.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"id","type":"string"},{"documentation":{"contents":["<p>Type the default event data.</p>\n"],"contentsRaw":"Type the default event data.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"type","type":"\"default\""}]},"DynamicObjectPointerEvent":{"documentation":{"contents":["<p>The event type for pointer-related map object events.</p>\n"],"contentsRaw":"The event type for pointer-related map object events.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"DynamicObjectPointerEvent","extends":["PointerEvent"],"methods":[],"properties":[{"documentation":{"contents":["<p>Geographical coordinates of the event.</p>\n"],"contentsRaw":"Geographical coordinates of the event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lngLat","inheritedFrom":"PointerEvent.lngLat","type":"number[]"},{"documentation":{"contents":["<p>The original DOM event.</p>\n"],"contentsRaw":"The original DOM event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"originalEvent","inheritedFrom":"PointerEvent.originalEvent","type":"MouseEvent | TouchEvent"},{"documentation":{"contents":["<p>Screen coordinates of the event.</p>\n"],"contentsRaw":"Screen coordinates of the event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"point","inheritedFrom":"PointerEvent.point","type":"number[]"},{"documentation":{"contents":["<p>The target map object of a pointer event.</p>\n"],"contentsRaw":"The target map object of a pointer event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"targetData","type":"T"}]},"TrafficScoreEvent":{"documentation":{"contents":["<p>Contains current traffic score.</p>\n"],"contentsRaw":"Contains current traffic score.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"TrafficScoreEvent","methods":[],"properties":[{"documentation":{"contents":["<p>Current traffic score</p>\n"],"contentsRaw":"Current traffic score","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"score","type":"number"}]},"TrafficVisibilityEvent":{"documentation":{"contents":["<p>Emitted when traffic visibility state changes</p>\n"],"contentsRaw":"Emitted when traffic visibility state changes","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"TrafficVisibilityEvent","methods":[],"properties":[]},"FloorLevel":{"documentation":{"contents":["<p>Contains a floor level data.</p>\n"],"contentsRaw":"Contains a floor level data.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"FloorLevel","methods":[],"properties":[{"documentation":{"contents":["<p>A floor level index</p>\n"],"contentsRaw":"A floor level index","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorLevelIndex","type":"number"},{"documentation":{"contents":["<p>A floor level name</p>\n"],"contentsRaw":"A floor level name","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorLevelName","type":"string"}]},"FloorPlanShowEvent":{"documentation":{"contents":["<p>Contains an appeared floor plan data.</p>\n"],"contentsRaw":"Contains an appeared floor plan data.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"FloorPlanShowEvent","methods":[],"properties":[{"documentation":{"contents":["<p>An index of a current displayed floor level.</p>\n"],"contentsRaw":"An index of a current displayed floor level.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"currentFloorLevelIndex","type":"number"},{"documentation":{"contents":["<p>All available floor plan levels.</p>\n"],"contentsRaw":"All available floor plan levels.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorLevels","type":"FloorLevel[]"},{"documentation":{"contents":["<p>An id of an appeared floor plan.</p>\n"],"contentsRaw":"An id of an appeared floor plan.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorPlanId","type":"string"}]},"FloorPlanHideEvent":{"documentation":{"contents":["<p>Contains a disappeared floor plan data.</p>\n"],"contentsRaw":"Contains a disappeared floor plan data.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"FloorPlanHideEvent","methods":[],"properties":[{"documentation":{"contents":["<p>An id of a disappeared floor plan.</p>\n"],"contentsRaw":"An id of a disappeared floor plan.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorPlanId","type":"string"}]},"FloorLevelChangeEvent":{"documentation":{"contents":["<p>Contains a current floor level data.</p>\n"],"contentsRaw":"Contains a current floor level data.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"FloorLevelChangeEvent","methods":[],"properties":[{"documentation":{"contents":["<p>A current level index of a floor plan.</p>\n"],"contentsRaw":"A current level index of a floor plan.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorLevelIndex","type":"number"},{"documentation":{"contents":["<p>A current level name of a floor plan.</p>\n"],"contentsRaw":"A current level name of a floor plan.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorLevelName","type":"string"},{"documentation":{"contents":["<p>An id of a floor plan.</p>\n"],"contentsRaw":"An id of a floor plan.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorPlanId","type":"string"}]},"StyleLoadEvent":{"documentation":{"contents":["<p>Contains currently loaded style response</p>\n"],"contentsRaw":"Contains currently loaded style response","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"StyleLoadEvent","methods":[],"properties":[{"documentation":{"contents":["<p>Style object, ID or URL. Depends on the way the style was set.</p>\n"],"contentsRaw":"Style object, ID or URL. Depends on the way the style was set.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"style","type":"string | Style"}]},"ChangeLanguageEvent":{"documentation":{"contents":["<p>Contains current map language</p>\n"],"contentsRaw":"Contains current map language","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"ChangeLanguageEvent","methods":[],"properties":[{"documentation":{"contents":["<p>Language short name.</p>\n"],"contentsRaw":"Language short name.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lang","type":"string"}]},"DestroyMapEvent":{"documentation":{"contents":["<p>Destroy event.</p>\n"],"contentsRaw":"Destroy event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"DestroyMapEvent","methods":[],"properties":[]},"BssAdsPriority":{"fileName":"src/bss/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"BssAdsPriority","methods":[],"properties":[{"fileName":"src/bss/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"adsPriority","type":"undefined | \"city\""}]},"MapOptions":{"documentation":{"contents":["<p>Map initialization options.</p>\n"],"contentsRaw":"Map initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MapOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Enables OSM copyright auto hide after 5 sec</p>\n<p><strong>[DEPRECATED]</strong> This option is no longer supported and will be removed in the next major release.</p>\n"],"contentsRaw":"Enables OSM copyright auto hide after 5 sec\n\n**[DEPRECATED]** This option is no longer supported and will be removed in the next major release.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"autoHideOSMCopyright","type":"undefined | false | true"},{"documentation":{"contents":["<p>Map center in geographical coordinates (<code>[longitude, latitude]</code>).</p>\n"],"contentsRaw":"Map center in geographical coordinates (`[longitude, latitude]`).","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"center","type":"number[]"},{"documentation":{"contents":["<p>Sets padding for controls layout</p>\n"],"contentsRaw":"Sets padding for controls layout","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"controlsLayoutPadding","type":"Partial<Padding>"},{"documentation":{"contents":["<p>Where to add copyright control during the map initialization. By default it&#39;s <code>&quot;bottomRight&quot;</code>.</p>\n"],"contentsRaw":"Where to add copyright control during the map initialization. By default it's `\"bottomRight\"`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"copyright","type":"ControlPosition"},{"documentation":{"contents":["<p>Sets default background color, while style is loading</p>\n"],"contentsRaw":"Sets default background color, while style is loading","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"defaultBackgroundColor","type":"undefined | string"},{"documentation":{"contents":["<p>Prevents the map from dragging.</p>\n"],"contentsRaw":"Prevents the map from dragging.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"disableDragging","type":"undefined | false | true"},{"documentation":{"contents":["<p>Prevents users from pitching the map.</p>\n"],"contentsRaw":"Prevents users from pitching the map.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"disablePitchByUserInteraction","type":"undefined | false | true"},{"documentation":{"contents":["<p>Prevents users from rotating the map.</p>\n"],"contentsRaw":"Prevents users from rotating the map.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"disableRotationByUserInteraction","type":"undefined | false | true"},{"documentation":{"contents":["<p>Disables map zoom on scrolling over the map container.</p>\n"],"contentsRaw":"Disables map zoom on scrolling over the map container.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"disableZoomOnScroll","type":"undefined | false | true"},{"documentation":{"contents":["<p>Tracks changes of the map container size and automatically updates the size of the map.</p>\n"],"contentsRaw":"Tracks changes of the map container size and automatically updates the size of the map.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"enableTrackResize","type":"undefined | false | true"},{"documentation":{"contents":["<p>Whether a floor control should be added during the map initialization. By default it&#39;s <code>false</code>.\nSet to <code>true</code> to add the floor control at <code>&quot;topRight&quot;</code> position.</p>\n"],"contentsRaw":"Whether a floor control should be added during the map initialization. By default it's `false`.\nSet to `true` to add the floor control at `\"topRight\"` position.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"floorControl","type":"ControlPosition | boolean"},{"documentation":{"contents":["<p>Prevents center changing while user is zooming or rotating the map by touch.</p>\n"],"contentsRaw":"Prevents center changing while user is zooming or rotating the map by touch.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"keepCenterWhileUserZoomRotate","type":"undefined | false | true"},{"documentation":{"contents":["<p>The key that allows usage of the API.</p>\n"],"contentsRaw":"The key that allows usage of the API.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"key","type":"undefined | string"},{"documentation":{"contents":["<p>The desired map language.\nshort language code &#39;en&#39;, &#39;ru&#39;, ...etc</p>\n"],"contentsRaw":"The desired map language.\nshort language code 'en', 'ru', ...etc","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lang","type":"undefined | string"},{"documentation":{"contents":["<p>The map will be constrained to the given bounds, if set.</p>\n"],"contentsRaw":"The map will be constrained to the given bounds, if set.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxBounds","type":"LngLatBounds"},{"documentation":{"contents":["<p>Maximum map pitch in degrees.</p>\n"],"contentsRaw":"Maximum map pitch in degrees.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxPitch","type":"undefined | number"},{"documentation":{"contents":["<p>Maximum map styleZoom.</p>\n"],"contentsRaw":"Maximum map styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum map pitch in degrees.</p>\n"],"contentsRaw":"Minimum map pitch in degrees.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minPitch","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum map styleZoom.</p>\n"],"contentsRaw":"Minimum map styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Dimensions in pixels applied on each side of the viewport for shifting the vanishing point.\n the padding on each side has a clamp to a positive value no larger than the map canvas size for either side</p>\n"],"contentsRaw":"Dimensions in pixels applied on each side of the viewport for shifting the vanishing point.\n the padding on each side has a clamp to a positive value no larger than the map canvas size for either side","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"padding","type":"Padding"},{"documentation":{"contents":["<p>Map pitch in degrees.</p>\n"],"contentsRaw":"Map pitch in degrees.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"pitch","type":"undefined | number"},{"documentation":{"contents":["<p>Sets preserveDrawingBuffer option to WebGLRenderingContext.</p>\n"],"contentsRaw":"Sets preserveDrawingBuffer option to WebGLRenderingContext.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"preserveDrawingBuffer","type":"undefined | false | true"},{"documentation":{"contents":["<p>Map rotation in degrees.</p>\n"],"contentsRaw":"Map rotation in degrees.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"rotation","type":"undefined | number"},{"documentation":{"contents":["<p>Whether a scale control should be added during the map initialization. By default it&#39;s <code>false</code>.\nSet to <code>true</code> to add the scale control at <code>&quot;bottomLeft&quot;</code> position.</p>\n"],"contentsRaw":"Whether a scale control should be added during the map initialization. By default it's `false`.\nSet to `true` to add the scale control at `\"bottomLeft\"` position.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"scaleControl","type":"ControlPosition | boolean"},{"documentation":{"contents":["<p>The map style ID, that you can get at <a href=\"https://styles.2gis.com\">https://styles.2gis.com</a></p>\n"],"contentsRaw":"The map style ID, that you can get at https://styles.2gis.com","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"style","type":"undefined | string"},{"documentation":{"contents":["<p>Map style options. Containts path to style assets - icons and fonts.</p>\n"],"contentsRaw":"Map style options. Containts path to style assets - icons and fonts.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"styleOptions","type":"Partial<StyleOptions>"},{"documentation":{"contents":["<p>Map style global variables</p>\n"],"contentsRaw":"Map style global variables","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"styleState","type":"StyleState"},{"documentation":{"contents":["<p>Map style zoom.\nUse this option if you want to set the same zoom that is used in the style settings. The styleZoom and zoom options set the same map scale but in different projections.\nIf both options are set, the styleZoom has a higher priority than the zoom option.</p>\n"],"contentsRaw":"Map style zoom.\nUse this option if you want to set the same zoom that is used in the style settings. The styleZoom and zoom options set the same map scale but in different projections.\nIf both options are set, the styleZoom has a higher priority than the zoom option.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"styleZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Map rotation threshold with multitouch in degrees. 10 by default.</p>\n"],"contentsRaw":"Map rotation threshold with multitouch in degrees. 10 by default.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"touchRotationThreshold","type":"undefined | number"},{"documentation":{"contents":["<p>Whether a traffic control should be added during the map initialization. By default it&#39;s <code>false</code>.\nSet to <code>true</code> to add the traffic control at <code>&quot;topRight&quot;</code> position.</p>\n"],"contentsRaw":"Whether a traffic control should be added during the map initialization. By default it's `false`.\nSet to `true` to add the traffic control at `\"topRight\"` position.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"trafficControl","type":"ControlPosition | boolean"},{"documentation":{"contents":["<p>Enables map to download additional plugin for RTL-text rendering. Values are:</p>\n<ul>\n<li>&#39;always-on&#39; - plugin will be downloaded at map initialization.</li>\n<li>&#39;always-off - plugin will not be downloaded.</li>\n<li>&#39;depends-on-language&#39; - plugin will be downloaded only if &quot;ar&quot; language is selected.</li>\n</ul>\n<p>Default value is &#39;depends-on-language&#39;. If the language of the map is not rtl (eg. &#39;en&#39;)\nand tiles contain rtl labels, you should use &#39;always-on&#39; to render rtl label properly.</p>\n"],"contentsRaw":"Enables map to download additional plugin for RTL-text rendering. Values are:\n - 'always-on' - plugin will be downloaded at map initialization.\n - 'always-off - plugin will not be downloaded.\n - 'depends-on-language' - plugin will be downloaded only if \"ar\" language is selected.\n\nDefault value is 'depends-on-language'. If the language of the map is not rtl (eg. 'en')\nand tiles contain rtl labels, you should use 'always-on' to render rtl label properly.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"useRtlTextPlugin","type":"\"always-on\" | \"always-off\" | \"depends-on-language\""},{"documentation":{"contents":["<p>Sets the map WebGL version. It can be helpful if you use CustomLayer with other WebGL libraries.</p>\n"],"contentsRaw":"Sets the map WebGL version. It can be helpful if you use CustomLayer with other WebGL libraries.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"webglVersion","type":"WebGLVersion"},{"documentation":{"contents":["<p>Map zoom.</p>\n"],"contentsRaw":"Map zoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zoom","type":"undefined | number"},{"documentation":{"contents":["<p>Whether a zoom control should be added during the map initialization. By default it&#39;s <code>&quot;topRight&quot;</code>.\nSet to <code>false</code> to not add the control.</p>\n"],"contentsRaw":"Whether a zoom control should be added during the map initialization. By default it's `\"topRight\"`.\nSet to `false` to not add the control.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zoomControl","type":"ControlPosition | boolean"}]},"StyleState":{"documentation":{"contents":["<p>Style state.</p>\n"],"contentsRaw":"Style state.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"StyleState","indexSignature":{"documentation":{"contents":["<p>Style state.</p>\n"],"contentsRaw":"Style state.","metadata":{}},"fileName":"src/types/index.ts","kind":"signature","name":"__index","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"key","type":"string"}],"returnType":"number | string | boolean | number[] | string[] | undefined","type":"{ [key: string]: number | string | boolean | number[] | string[] | undefined }"},"methods":[],"properties":[]},"MapSupportOptions":{"documentation":{"contents":["<p>Options for Map.isSupported method.</p>\n"],"contentsRaw":"Options for Map.isSupported method.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MapSupportOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Causes isSupported method to return false if\nthe performance of MapGL would be dramatically worse than\n expected (i.e. a software renderer is would be used)</p>\n"],"contentsRaw":"Causes isSupported method to return false if\nthe performance of MapGL would be dramatically worse than\n expected (i.e. a software renderer is would be used)","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"failIfMajorPerformanceCaveat","type":"boolean"}]},"MarkerOptions":{"documentation":{"contents":["<p>Marker initialization options.</p>\n"],"contentsRaw":"Marker initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MarkerOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The position in pixels of the &quot;tip&quot; of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the marker&#39;s geographical location.\nCentered by default if size is specified.</p>\n"],"contentsRaw":"The position in pixels of the \"tip\" of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the marker's geographical location.\nCentered by default if size is specified.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Geographical coordinates of marker center <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Geographical coordinates of marker center `[longitude, latitude]`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[]"},{"documentation":{"contents":["<p>Icon anchor in hovered state.</p>\n"],"contentsRaw":"Icon anchor in hovered state.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverAnchor","type":"number[]"},{"documentation":{"contents":["<p>Marker icon URL in hovered state.</p>\n"],"contentsRaw":"Marker icon URL in hovered state.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverIcon","type":"undefined | string"},{"documentation":{"contents":["<p>Marker icon size <code>[width, height]</code> in pixels in hovered state.</p>\n"],"contentsRaw":"Marker icon size `[width, height]` in pixels in hovered state.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"hoverSize","type":"number[]"},{"documentation":{"contents":["<p>Marker icon URL.</p>\n"],"contentsRaw":"Marker icon URL.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"icon","type":"undefined | string"},{"documentation":{"contents":["<p>Allows the marker to emit events (like <code>mouseover</code>). <code>true</code> by default.</p>\n"],"contentsRaw":"Allows the marker to emit events (like `mouseover`). `true` by default.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"interactive","type":"undefined | false | true"},{"documentation":{"contents":["<p>Initialization options of the marker&#39;s label.</p>\n"],"contentsRaw":"Initialization options of the marker's label.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"label","type":"MarkerLabelOptions"},{"documentation":{"contents":["<p>Maximum display styleZoom of the marker.</p>\n"],"contentsRaw":"Maximum display styleZoom of the marker.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom of the marker.</p>\n"],"contentsRaw":"Minimum display styleZoom of the marker.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Icon clockwise rotation in the screen plane in degrees.</p>\n"],"contentsRaw":"Icon clockwise rotation in the screen plane in degrees.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"rotation","type":"undefined | number"},{"documentation":{"contents":["<p>Marker icon size <code>[width, height]</code> in pixels.</p>\n"],"contentsRaw":"Marker icon size `[width, height]` in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"size","type":"number[]"},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"MarkerLabelOptions":{"documentation":{"contents":["<p>Options for the label of marker.</p>\n"],"contentsRaw":"Options for the label of marker.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MarkerLabelOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate left and up, while negative values indicate right and down.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use the <code>offset</code> option instead.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate left and up, while negative values indicate right and down.\n\n**[DEPRECATED]** Will be removed in the next major release, use the `offset` option instead.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Text color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Text color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color","type":"undefined | string"},{"documentation":{"contents":["<p>Text size.</p>\n"],"contentsRaw":"Text size.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"fontSize","type":"undefined | number"},{"documentation":{"contents":["<p>Background color of letters (when <code>haloRadius</code> is specified). The same format as for <code>color</code>.</p>\n"],"contentsRaw":"Background color of letters (when `haloRadius` is specified). The same format as for `color`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"haloColor","type":"undefined | string"},{"documentation":{"contents":["<p>Use <code>haloRadius</code> to add background behind each letter.</p>\n"],"contentsRaw":"Use `haloRadius` to add background behind each letter.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"haloRadius","type":"undefined | number"},{"documentation":{"contents":["<p>Background image for the label.</p>\n"],"contentsRaw":"Background image for the label.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"image","type":"LabelImage"},{"documentation":{"contents":["<p>Space between each letter.</p>\n"],"contentsRaw":"Space between each letter.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"letterSpacing","type":"undefined | number"},{"documentation":{"contents":["<p>For multiline label <code>lineHeight</code> specify how far lines between each other.</p>\n"],"contentsRaw":"For multiline label `lineHeight` specify how far lines between each other.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lineHeight","type":"undefined | number"},{"documentation":{"contents":["<p>Maximum display styleZoom of the label. Note that the label&#39;s zoom-dependent visibility is constrained by the marker&#39;s minZoom and maxZoom options, if specified.</p>\n"],"contentsRaw":"Maximum display styleZoom of the label. Note that the label's zoom-dependent visibility is constrained by the marker's minZoom and maxZoom options, if specified.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom of the label. Note that the label&#39;s zoom-dependent visibility is constrained by the marker&#39;s minZoom and maxZoom options, if specified.</p>\n"],"contentsRaw":"Minimum display styleZoom of the label. Note that the label's zoom-dependent visibility is constrained by the marker's minZoom and maxZoom options, if specified.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate right and down, while negative values indicate left and up.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate right and down, while negative values indicate left and up.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"offset","type":"number[]"},{"documentation":{"contents":["<p>Coordinates (from 0 to 1 in each dimension) of the text box &quot;tip&quot; relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical <code>coordinates</code> respects the absolute <code>offset</code>.</p>\n"],"contentsRaw":"Coordinates (from 0 to 1 in each dimension) of the text box \"tip\" relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"relativeAnchor","type":"number[]"},{"documentation":{"contents":["<p>Label&#39;s text.</p>\n"],"contentsRaw":"Label's text.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"text","type":"string"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"MarkerIconOptions":{"documentation":{"contents":["<p>Options for marker setIcon and setHoverIcon methods.</p>\n"],"contentsRaw":"Options for marker setIcon and setHoverIcon methods.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"MarkerIconOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The position in pixels of the &quot;tip&quot; of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the marker&#39;s geographical location.\nCentered by default if size is specified.</p>\n"],"contentsRaw":"The position in pixels of the \"tip\" of the icon (relative to its top left corner).\nThe icon will be aligned so that this point is at the marker's geographical location.\nCentered by default if size is specified.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Marker icon URL.</p>\n"],"contentsRaw":"Marker icon URL.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"icon","type":"string"},{"documentation":{"contents":["<p>Marker icon size <code>[width, height]</code> in pixels.</p>\n"],"contentsRaw":"Marker icon size `[width, height]` in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"size","type":"number[]"}]},"LabelOptions":{"documentation":{"contents":["<p>Label initialization options.</p>\n"],"contentsRaw":"Label initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"LabelOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate left and up, while negative values indicate right and down.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use the <code>offset</code> option instead.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate left and up, while negative values indicate right and down.\n\n**[DEPRECATED]** Will be removed in the next major release, use the `offset` option instead.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Text color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Text color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color","type":"undefined | string"},{"documentation":{"contents":["<p>Geographical coordinates of label center <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Geographical coordinates of label center `[longitude, latitude]`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[]"},{"documentation":{"contents":["<p>Text size.</p>\n"],"contentsRaw":"Text size.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"fontSize","type":"undefined | number"},{"documentation":{"contents":["<p>Background color of letters (when <code>haloRadius</code> is specified). The same format as for <code>color</code>.</p>\n"],"contentsRaw":"Background color of letters (when `haloRadius` is specified). The same format as for `color`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"haloColor","type":"undefined | string"},{"documentation":{"contents":["<p>Use <code>haloRadius</code> to add background behind each letter.</p>\n"],"contentsRaw":"Use `haloRadius` to add background behind each letter.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"haloRadius","type":"undefined | number"},{"documentation":{"contents":["<p>Background image for the label.</p>\n"],"contentsRaw":"Background image for the label.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"image","type":"LabelImage"},{"documentation":{"contents":["<p>Space between each letter.</p>\n"],"contentsRaw":"Space between each letter.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"letterSpacing","type":"undefined | number"},{"documentation":{"contents":["<p>For multiline label <code>lineHeight</code> specify how far lines between each other.</p>\n"],"contentsRaw":"For multiline label `lineHeight` specify how far lines between each other.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"lineHeight","type":"undefined | number"},{"documentation":{"contents":["<p>Maximum display styleZoom of the label.</p>\n"],"contentsRaw":"Maximum display styleZoom of the label.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom of the label.</p>\n"],"contentsRaw":"Minimum display styleZoom of the label.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>The offset distance of text box from its <code>relativeAnchor</code>.\nPositive values indicate right and down, while negative values indicate left and up.</p>\n"],"contentsRaw":"The offset distance of text box from its `relativeAnchor`.\nPositive values indicate right and down, while negative values indicate left and up.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"offset","type":"number[]"},{"documentation":{"contents":["<p>Coordinates (from 0 to 1 in each dimension) of the text box &quot;tip&quot; relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical <code>coordinates</code> respects the absolute <code>offset</code>.</p>\n"],"contentsRaw":"Coordinates (from 0 to 1 in each dimension) of the text box \"tip\" relative to its top left corner, for example:\n[0, 0] value is the top left corner, [0.5, 0.5] — center point, and [1, 1] is the bottom right corner of the box.\nThe label will be placed so that this point is at geographical `coordinates` respects the absolute `offset`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"relativeAnchor","type":"number[]"},{"documentation":{"contents":["<p>Label&#39;s text.</p>\n"],"contentsRaw":"Label's text.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"text","type":"string"},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"HtmlMarkerOptions":{"documentation":{"contents":["<p>HtmlMarker initialization options.</p>\n"],"contentsRaw":"HtmlMarker initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"HtmlMarkerOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The position in pixels of the &quot;tip&quot; of the HTML marker relative to its top-left corner.</p>\n"],"contentsRaw":"The position in pixels of the \"tip\" of the HTML marker relative to its top-left corner.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"anchor","type":"number[]"},{"documentation":{"contents":["<p>Geographical coordinates <code>[longitude, latitude]</code> of the top-left corner of the HTML marker, taking into account its anchor.</p>\n"],"contentsRaw":"Geographical coordinates `[longitude, latitude]` of the top-left corner of the HTML marker, taking into account its anchor.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[]"},{"documentation":{"contents":["<p>HTML content of the HTML marker.</p>\n"],"contentsRaw":"HTML content of the HTML marker.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"html","type":"HTMLElement | string"},{"documentation":{"contents":["<p>HTML marker can be pointer-event target if this option is set to <code>true</code> (pointer-events: auto),\notherwise it can&#39;t (pointer-events: none).</p>\n"],"contentsRaw":"HTML marker can be pointer-event target if this option is set to `true` (pointer-events: auto),\notherwise it can't (pointer-events: none).","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"interactive","type":"undefined | false | true"},{"documentation":{"contents":["<p>Maximum display styleZoom of the HTML marker.</p>\n"],"contentsRaw":"Maximum display styleZoom of the HTML marker.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom of the HTML marker.</p>\n"],"contentsRaw":"Minimum display styleZoom of the HTML marker.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Capture events if set. Otherwise events will passed to the map. By default it&#39;s <code>true</code>.</p>\n"],"contentsRaw":"Capture events if set. Otherwise events will passed to the map. By default it's `true`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"preventMapInteractions","type":"undefined | false | true"},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"ControlOptions":{"documentation":{"contents":["<p>Control initialization options.</p>\n"],"contentsRaw":"Control initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"ControlOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Position of the control.</p>\n"],"contentsRaw":"Position of the control.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"position","type":"ControlPosition"}]},"PolygonOptions":{"documentation":{"contents":["<p>Polygon initialization options.</p>\n"],"contentsRaw":"Polygon initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"PolygonOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Fill color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Fill color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color","type":"undefined | string"},{"documentation":{"contents":["<p>Geographical coordinates of polygon points in format: <code>[outerEdges, cropEdges1, cropEdges2, ...]</code>.</p>\n<p>The first section is <code>outerEdges</code> which describes an array of outer edges: <code>[firstPoint, secondPoint, ..., firstPoint]</code>.\nEach point is a geographical point: <code>[longitude, latitude]</code>. The last point should be the same as the first.</p>\n<p>Then optionally you can crop some polygons from the main one (outer) by specifying <code>cropEdges1</code>, <code>cropEdges2</code> and so on.\nA format is the same as the main section: <code>[firstPoint, secondPoint, ..., firstPoint]</code> each point is <code>[longitude, latitude]</code>.</p>\n<p>Important: <code>outerEdges</code> and <code>cropEdgesN</code> must not touch or intersect each other.</p>\n<p>Only the first section (<code>outerEdges</code>) is required. There may be many <code>cropEdges</code> sections.</p>\n"],"contentsRaw":"Geographical coordinates of polygon points in format: `[outerEdges, cropEdges1, cropEdges2, ...]`.\n\nThe first section is `outerEdges` which describes an array of outer edges: `[firstPoint, secondPoint, ..., firstPoint]`.\nEach point is a geographical point: `[longitude, latitude]`. The last point should be the same as the first.\n\nThen optionally you can crop some polygons from the main one (outer) by specifying `cropEdges1`, `cropEdges2` and so on.\nA format is the same as the main section: `[firstPoint, secondPoint, ..., firstPoint]` each point is `[longitude, latitude]`.\n\nImportant: `outerEdges` and `cropEdgesN` must not touch or intersect each other.\n\nOnly the first section (`outerEdges`) is required. There may be many `cropEdges` sections.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[][][]"},{"documentation":{"contents":["<p>Allows the polygon to emit events (like <code>mouseover</code>). <code>true</code> by default.</p>\n"],"contentsRaw":"Allows the polygon to emit events (like `mouseover`). `true` by default.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"interactive","type":"undefined | false | true"},{"documentation":{"contents":["<p>Maximum display styleZoom.</p>\n"],"contentsRaw":"Maximum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom.</p>\n"],"contentsRaw":"Minimum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Stroke color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"strokeColor","type":"undefined | string"},{"documentation":{"contents":["<p>Stroke width in pixels.</p>\n"],"contentsRaw":"Stroke width in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"strokeWidth","type":"undefined | number"},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"PolylineOptions":{"documentation":{"contents":["<p>Polyline initialization options.</p>\n"],"contentsRaw":"Polyline initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"PolylineOptions","methods":[],"properties":[{"documentation":{"contents":["<p>The line color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"The line color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color","type":"undefined | string"},{"documentation":{"contents":["<p>The second line color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional Polyline to draw an extra line with a different color.</p>\n"],"contentsRaw":"The second line color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different color.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color2","type":"undefined | string"},{"documentation":{"contents":["<p>The third line color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional Polyline to draw an extra line with a different color.</p>\n"],"contentsRaw":"The third line color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different color.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color3","type":"undefined | string"},{"documentation":{"contents":["<p>An array of polyline coordinates: <code>[firstPoint, secondPoint, ...]</code>.\nEach point is a geographical point: <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"An array of polyline coordinates: `[firstPoint, secondPoint, ...]`.\nEach point is a geographical point: `[longitude, latitude]`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[][]"},{"documentation":{"contents":["<p>The length of the dash in pixels. If no dash length is specified, a polyline will be drawn.</p>\n"],"contentsRaw":"The length of the dash in pixels. If no dash length is specified, a polyline will be drawn.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"dashLength","type":"number | InterpolateExpression<number>"},{"documentation":{"contents":["<p>The gap color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"The gap color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"gapColor","type":"undefined | string"},{"documentation":{"contents":["<p>The length of the gap in pixels. The default gap length is equal to the dash length.</p>\n"],"contentsRaw":"The length of the gap in pixels. The default gap length is equal to the dash length.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"gapLength","type":"number | InterpolateExpression<number>"},{"documentation":{"contents":["<p>Allows the polyline to emit events (like <code>mouseover</code>). <code>true</code> by default.</p>\n"],"contentsRaw":"Allows the polyline to emit events (like `mouseover`). `true` by default.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"interactive","type":"undefined | false | true"},{"documentation":{"contents":["<p>Maximum display styleZoom.</p>\n"],"contentsRaw":"Maximum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom.</p>\n"],"contentsRaw":"Minimum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>The line width in pixels.</p>\n"],"contentsRaw":"The line width in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"width","type":"number | InterpolateExpression<number>"},{"documentation":{"contents":["<p>The second line width in pixels.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional Polyline to draw an extra line with a different width.</p>\n"],"contentsRaw":"The second line width in pixels.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different width.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"width2","type":"number | InterpolateExpression<number>"},{"documentation":{"contents":["<p>The third line width in pixels.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional Polyline to draw an extra line with a different width.</p>\n"],"contentsRaw":"The third line width in pixels.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different width.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"width3","type":"number | InterpolateExpression<number>"},{"documentation":{"contents":["<p>Draw order of the first line.</p>\n"],"contentsRaw":"Draw order of the first line.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"},{"documentation":{"contents":["<p>Draw order of second line.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional Polyline to draw an extra line with a different zIndex.</p>\n"],"contentsRaw":"Draw order of second line.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different zIndex.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex2","type":"undefined | number"},{"documentation":{"contents":["<p>Draw order of third line.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional Polyline to draw an extra line with a different zIndex.</p>\n"],"contentsRaw":"Draw order of third line.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional Polyline to draw an extra line with a different zIndex.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex3","type":"undefined | number"}]},"CircleOptions":{"documentation":{"contents":["<p>Circle initialization options.</p>\n"],"contentsRaw":"Circle initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"CircleOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Fill color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Fill color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color","type":"undefined | string"},{"documentation":{"contents":["<p>Geographical coordinates of the circle center: <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Geographical coordinates of the circle center: `[longitude, latitude]`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[]"},{"documentation":{"contents":["<p>Allows the circle to emit events (like <code>mouseover</code>). <code>true</code> by default.</p>\n"],"contentsRaw":"Allows the circle to emit events (like `mouseover`). `true` by default.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"interactive","type":"undefined | false | true"},{"documentation":{"contents":["<p>Maximum display styleZoom.</p>\n"],"contentsRaw":"Maximum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom.</p>\n"],"contentsRaw":"Minimum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Circle radius in meters.</p>\n"],"contentsRaw":"Circle radius in meters.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"radius","type":"number"},{"documentation":{"contents":["<p>Stroke color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"strokeColor","type":"undefined | string"},{"documentation":{"contents":["<p>Stroke width in pixels.</p>\n"],"contentsRaw":"Stroke width in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"strokeWidth","type":"undefined | number"},{"documentation":{"contents":["<p>User specific data.</p>\n"],"contentsRaw":"User specific data.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"CircleMarkerOptions":{"documentation":{"contents":["<p>CircleMarker initialization options.</p>\n"],"contentsRaw":"CircleMarker initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"CircleMarkerOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Fill color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Fill color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"color","type":"undefined | string"},{"documentation":{"contents":["<p>Geographical coordinates of the circleMarker center: <code>[longitude, latitude]</code>.</p>\n"],"contentsRaw":"Geographical coordinates of the circleMarker center: `[longitude, latitude]`.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"coordinates","type":"number[]"},{"documentation":{"contents":["<p>CircleMarker diameter in pixels.</p>\n"],"contentsRaw":"CircleMarker diameter in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"diameter","type":"undefined | number"},{"documentation":{"contents":["<p>Allows the circleMarker to emit events (like <code>mouseover</code>). <code>true</code> by default.</p>\n"],"contentsRaw":"Allows the circleMarker to emit events (like `mouseover`). `true` by default.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"interactive","type":"undefined | false | true"},{"documentation":{"contents":["<p>Maximum display styleZoom.</p>\n"],"contentsRaw":"Maximum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom.</p>\n"],"contentsRaw":"Minimum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>The second stroke color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional CircleMarker to draw an extra stroke.</p>\n"],"contentsRaw":"The second stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional CircleMarker to draw an extra stroke.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"stroke2Color","type":"undefined | string"},{"documentation":{"contents":["<p>The second stroke width in pixels.</p>\n<p><strong>[DEPRECATED]</strong> Will be removed in the next major release, use additional CircleMarker to draw an extra stroke.</p>\n"],"contentsRaw":"The second stroke width in pixels.\n\n**[DEPRECATED]** Will be removed in the next major release, use additional CircleMarker to draw an extra stroke.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isDeprecated":true,"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"stroke2Width","type":"undefined | number"},{"documentation":{"contents":["<p>Stroke color in hexadecimal RGB (<code>#ff0000</code>) or RGBA (<code>#ff0000ff</code>) format.</p>\n"],"contentsRaw":"Stroke color in hexadecimal RGB (`#ff0000`) or RGBA (`#ff0000ff`) format.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"strokeColor","type":"undefined | string"},{"documentation":{"contents":["<p>Stroke width in pixels.</p>\n"],"contentsRaw":"Stroke width in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"strokeWidth","type":"undefined | number"},{"documentation":{"contents":["<p>User defined data</p>\n"],"contentsRaw":"User defined data","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"userData","type":"any"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"LabelImage":{"documentation":{"contents":["<p>Source image for text label background.</p>\n"],"contentsRaw":"Source image for text label background.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"LabelImage","methods":[],"properties":[{"documentation":{"contents":["<p>Sets the space in pixels between the label text box and the edge of the stretched image\nfor all four sides [top, right, bottom, left], like in CSS.\n[0, 0, 0, 0] by default.</p>\n"],"contentsRaw":"Sets the space in pixels between the label text box and the edge of the stretched image\nfor all four sides [top, right, bottom, left], like in CSS.\n[0, 0, 0, 0] by default.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"padding","type":"[]"},{"documentation":{"contents":["<p>The ratio of logical pixels in the image to physical pixels on the screen.</p>\n"],"contentsRaw":"The ratio of logical pixels in the image to physical pixels on the screen.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"pixelRatio","type":"undefined | number"},{"documentation":{"contents":["<p><code>[width, height]</code> — image size in logical pixels</p>\n"],"contentsRaw":"`[width, height]` — image size in logical pixels","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"size","type":"[]"},{"documentation":{"contents":["<p>Defines the parts of the image that can be stretched horizontally.</p>\n"],"contentsRaw":"Defines the parts of the image that can be stretched horizontally.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"stretchX","type":"Array<[]>"},{"documentation":{"contents":["<p>Defines the parts of the image that can be stretched vertically.</p>\n"],"contentsRaw":"Defines the parts of the image that can be stretched vertically.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"stretchY","type":"Array<[]>"},{"documentation":{"contents":["<p>Source image URL.</p>\n"],"contentsRaw":"Source image URL.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"url","type":"string"}]},"Padding":{"documentation":{"contents":["<p>Padding in pixels on different sides of the container.</p>\n"],"contentsRaw":"Padding in pixels on different sides of the container.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"Padding","methods":[],"properties":[{"documentation":{"contents":["<p>Bottom padding in pixels.</p>\n"],"contentsRaw":"Bottom padding in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"bottom","type":"number"},{"documentation":{"contents":["<p>Left padding in pixels.</p>\n"],"contentsRaw":"Left padding in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"left","type":"number"},{"documentation":{"contents":["<p>Right padding in pixels.</p>\n"],"contentsRaw":"Right padding in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"right","type":"number"},{"documentation":{"contents":["<p>Top padding in pixels.</p>\n"],"contentsRaw":"Top padding in pixels.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"top","type":"number"}]},"FitBoundsOptions":{"documentation":{"contents":["<p>Options for fitBounds method.</p>\n"],"contentsRaw":"Options for fitBounds method.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"FitBoundsOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Animation options.</p>\n"],"contentsRaw":"Animation options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"animation","type":"AnimationOptions"},{"documentation":{"contents":["<p>If true the fitBounds will consider the map rotation</p>\n"],"contentsRaw":"If true the fitBounds will consider the map rotation","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"considerRotation","type":"undefined | false | true"},{"documentation":{"contents":["<p>The limit for the maximum zoom.</p>\n"],"contentsRaw":"The limit for the maximum zoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>The amount of padding in pixels to add to the given bounds.</p>\n"],"contentsRaw":"The amount of padding in pixels to add to the given bounds.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"padding","type":"Partial<Padding>"},{"documentation":{"contents":["<p>If true fitBounds ignores the padding property in the map options</p>\n"],"contentsRaw":"If true fitBounds ignores the padding property in the map options","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"skipMapPadding","type":"undefined | false | true"}]},"SourceAttributes":{"documentation":{"contents":["<p>Data source attributes.</p>\n"],"contentsRaw":"Data source attributes.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"SourceAttributes","indexSignature":{"documentation":{"contents":["<p>Data source attributes.</p>\n"],"contentsRaw":"Data source attributes.","metadata":{}},"fileName":"src/types/index.ts","kind":"signature","name":"__index","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"key","type":"string"}],"returnType":"number | string | boolean","type":"{ [key: string]: number | string | boolean }"},"methods":[],"properties":[]},"FeatureState":{"documentation":{"contents":["<p>FeatureState attributes.</p>\n"],"contentsRaw":"FeatureState attributes.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"FeatureState","indexSignature":{"documentation":{"contents":["<p>FeatureState attributes.</p>\n"],"contentsRaw":"FeatureState attributes.","metadata":{}},"fileName":"src/types/index.ts","kind":"signature","name":"__index","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"key","type":"string"}],"returnType":"number | string | boolean | null","type":"{ [key: string]: number | string | boolean | null }"},"methods":[],"properties":[]},"FeatureStateMap":{"documentation":{"contents":["<p>FeatureStateMap source attributes.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const featureStateMap = {\n  &quot;70030076195691401&quot;: { &quot;height&quot;: 300 },\n  &quot;70030076130722099&quot;: { &quot;height&quot;: 200 },\n}</code></pre>\n"],"contentsRaw":"FeatureStateMap source attributes.\n\nExample:\n```js\nconst featureStateMap = {\n  \"70030076195691401\": { \"height\": 300 },\n  \"70030076130722099\": { \"height\": 200 },\n}\n```","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"FeatureStateMap","indexSignature":{"documentation":{"contents":["<p>FeatureStateMap source attributes.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const featureStateMap = {\n  &quot;70030076195691401&quot;: { &quot;height&quot;: 300 },\n  &quot;70030076130722099&quot;: { &quot;height&quot;: 200 },\n}</code></pre>\n"],"contentsRaw":"FeatureStateMap source attributes.\n\nExample:\n```js\nconst featureStateMap = {\n  \"70030076195691401\": { \"height\": 300 },\n  \"70030076130722099\": { \"height\": 200 },\n}\n```","metadata":{}},"fileName":"src/types/index.ts","kind":"signature","name":"__index","parameters":[{"flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"parameter","name":"key","type":"string"}],"returnType":"FeatureState","type":"{ [key: string]: FeatureState }"},"methods":[],"properties":[]},"GeoJsonSourceOptions":{"documentation":{"contents":["<p>GeoJson data source initialization options.</p>\n"],"contentsRaw":"GeoJson data source initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"GeoJsonSourceOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Data source attributes.</p>\n"],"contentsRaw":"Data source attributes.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"attributes","type":"SourceAttributes"},{"documentation":{"contents":["<p>GeoJSON collection of feature objects or feature object.</p>\n"],"contentsRaw":"GeoJSON collection of feature objects or feature object.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"data","type":"FeatureCollection | Feature"},{"documentation":{"contents":["<p>Number of coordinates per vertex in the input array (2 by default)</p>\n"],"contentsRaw":"Number of coordinates per vertex in the input array (2 by default)","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"dimensions","type":"undefined | number"},{"documentation":{"contents":["<p>The maximum zoom value for which geojson tiles will be generated.</p>\n"],"contentsRaw":"The maximum zoom value for which geojson tiles will be generated.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Path to the models. Used when model&#39;s url in the source is a relative path</p>\n"],"contentsRaw":"Path to the models. Used when model's url in the source is a relative path","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"modelsPath","type":"undefined | string"}]},"RasterTileSourceOptions":{"documentation":{"contents":["<p>RasterTileSource initialization options.</p>\n"],"contentsRaw":"RasterTileSource initialization options.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"RasterTileSourceOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Data source attributes.</p>\n"],"contentsRaw":"Data source attributes.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"attributes","type":"SourceAttributes"},{"documentation":{"contents":["<p>Contains an attribution to be displayed when the map is shown to a user.</p>\n"],"contentsRaw":"Contains an attribution to be displayed when the map is shown to a user.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"attribution","type":"undefined | string"},{"documentation":{"contents":["<p>The maximum zoom value for which source data exists.</p>\n"],"contentsRaw":"The maximum zoom value for which source data exists.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>The minimum zoom value for which source data exists.</p>\n"],"contentsRaw":"The minimum zoom value for which source data exists.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Convert tile coordinates to URL.</p>\n",{"tag":"param","value":"@param "},{"tag":"param"}],"contentsRaw":"Convert tile coordinates to URL.\n\n@param \n@param \n@param","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"url","type":"(x: number, y: number, zoom: number) => string"}]},"RasterSource":{"documentation":{"contents":["<p>Source image for the raster.</p>\n"],"contentsRaw":"Source image for the raster.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"RasterSource","methods":[],"properties":[{"documentation":{"contents":["<p>Url of the image for the raster.</p>\n"],"contentsRaw":"Url of the image for the raster.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"url","type":"string"}]},"RasterOptions":{"documentation":{"contents":["<p>Options for the raster.</p>\n"],"contentsRaw":"Options for the raster.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"interface","name":"RasterOptions","methods":[],"properties":[{"documentation":{"contents":["<p>Raster geographical bounds in which an image will be displayed.</p>\n"],"contentsRaw":"Raster geographical bounds in which an image will be displayed.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"bounds","type":"LngLatBounds"},{"documentation":{"contents":["<p>Source image for the raster.</p>\n"],"contentsRaw":"Source image for the raster.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"image","type":"RasterSource"},{"documentation":{"contents":["<p>Maximum display styleZoom.</p>\n"],"contentsRaw":"Maximum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"maxZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Minimum display styleZoom.</p>\n"],"contentsRaw":"Minimum display styleZoom.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"minZoom","type":"undefined | number"},{"documentation":{"contents":["<p>Raster image opacity.</p>\n"],"contentsRaw":"Raster image opacity.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"opacity","type":"number | InterpolateExpression<number>"},{"documentation":{"contents":["<p>Draw order.</p>\n"],"contentsRaw":"Draw order.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":true,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"property","name":"zIndex","type":"undefined | number"}]},"Easing":{"documentation":{"contents":["<p>A set of easing functions (<a href=\"https://easings.net/en\">https://easings.net/en</a>).</p>\n"],"contentsRaw":"A set of easing functions (https://easings.net/en).","metadata":{}},"fileName":"src/types/animations.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"Easing","type":"\"linear\" | \"easeInQuad\" | \"easeOutQuad\" | \"easeInOutQuad\" | \"easeInCubic\" | \"easeOutCubic\" | \"easeInOutCubic\" | \"easeInQuart\" | \"easeOutQuart\" | \"easeInOutQuart\" | \"easeInQuint\" | \"easeOutQuint\" | \"easeInOutQuint\" | \"easeInSine\" | \"easeOutSine\" | \"easeInOutSine\" | \"easeInExpo\" | \"easeOutExpo\" | \"easeInOutExpo\" | \"easeInCirc\" | \"easeOutCirc\" | \"easeInOutCirc\" | \"easeInElastic\" | \"easeOutElastic\" | \"easeInOutElastic\" | \"easeInBack\" | \"easeOutBack\" | \"easeInOutBack\" | \"easeOutBounce\""},"InterpolateExpression":{"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"InterpolateExpression","type":"[]"},"Layer":{"documentation":{"contents":["<p>Stub type representing the style layer.</p>\n<p>Real style layer types will appear a little bit later.</p>\n"],"contentsRaw":"Stub type representing the style layer.\n\nReal style layer types will appear a little bit later.","metadata":{}},"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"Layer","type":"any"},"Style":{"fileName":"src/types/styles.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"Style","type":"any"},"EventTargetData":{"documentation":{"contents":["<p>The target data of a pointer event.</p>\n"],"contentsRaw":"The target data of a pointer event.","metadata":{}},"fileName":"src/types/events.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"EventTargetData","type":"GeoJsonEventTargetData | DefaultEventTargetData"},"ControlPosition":{"documentation":{"contents":["<p>Possible position of the control.</p>\n"],"contentsRaw":"Possible position of the control.","metadata":{}},"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"ControlPosition","type":"\"topLeft\" | \"topCenter\" | \"topRight\" | \"centerLeft\" | \"centerRight\" | \"bottomLeft\" | \"bottomCenter\" | \"bottomRight\""},"Source":{"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"Source","type":"GeoJsonSource | RasterTileSource"},"WebGLVersion":{"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"WebGLVersion","type":"1 | 2"},"SupportedSimpleOpts":{"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"SupportedSimpleOpts","type":"\"disableDragging\" | \"enableTrackResize\""},"GLContext":{"fileName":"src/types/index.ts","flags":{"isExported":true,"isExternal":false,"isOptional":false,"isPrivate":false,"isProtected":false,"isPublic":false,"isRest":false,"isStatic":false},"kind":"type alias","name":"GLContext","type":"WebGLRenderingContext | WebGL2RenderingContext"}}}
